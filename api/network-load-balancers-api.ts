/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { FlowLog } from '../model';
// @ts-ignore
import { FlowLogProperties } from '../model';
// @ts-ignore
import { FlowLogPut } from '../model';
// @ts-ignore
import { FlowLogs } from '../model';
// @ts-ignore
import { NetworkLoadBalancer } from '../model';
// @ts-ignore
import { NetworkLoadBalancerForwardingRule } from '../model';
// @ts-ignore
import { NetworkLoadBalancerForwardingRuleProperties } from '../model';
// @ts-ignore
import { NetworkLoadBalancerForwardingRulePut } from '../model';
// @ts-ignore
import { NetworkLoadBalancerForwardingRules } from '../model';
// @ts-ignore
import { NetworkLoadBalancerProperties } from '../model';
// @ts-ignore
import { NetworkLoadBalancerPut } from '../model';
// @ts-ignore
import { NetworkLoadBalancers } from '../model';
/**
 * NetworkLoadBalancersApi - axios parameter creator
 * @export
 */
export const NetworkLoadBalancersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified Network Load Balancer from the data center.
         * @summary Delete Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersDelete: async (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersDelete.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified Network Load Balancer within the data center.
         * @summary Retrieve Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFindByNetworkLoadBalancerId: async (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFindByNetworkLoadBalancerId.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFindByNetworkLoadBalancerId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified Network Load Balancer Flow Log.
         * @summary Delete NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsDelete: async (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsDelete.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsDelete.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified Network Load Balancer Flow Log.
         * @summary Retrieve NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsFindByFlowLogId: async (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the Flow Logs for the specified Network Load Balancer.
         * @summary List NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsGet: async (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsGet.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Network Load Balancer Flow Log.
         * @summary Partially modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPatch: async (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPatch.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPatch.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPatch.');
            }
            if (networkLoadBalancerFlowLogProperties === null || networkLoadBalancerFlowLogProperties === undefined) {
                throw new RequiredError('networkLoadBalancerFlowLogProperties','Required parameter networkLoadBalancerFlowLogProperties was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerFlowLogProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerFlowLogProperties !== undefined ? networkLoadBalancerFlowLogProperties : {})
                : (networkLoadBalancerFlowLogProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new Flow Log for the Network Load Balancer.
         * @summary Create NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPost: async (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPost.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPost.');
            }
            if (networkLoadBalancerFlowLog === null || networkLoadBalancerFlowLog === undefined) {
                throw new RequiredError('networkLoadBalancerFlowLog','Required parameter networkLoadBalancerFlowLog was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerFlowLog !== undefined ? networkLoadBalancerFlowLog : {})
                : (networkLoadBalancerFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified Network Load Balancer Flow Log.
         * @summary Modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPut: async (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPut.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPut.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPut.');
            }
            if (networkLoadBalancerFlowLog === null || networkLoadBalancerFlowLog === undefined) {
                throw new RequiredError('networkLoadBalancerFlowLog','Required parameter networkLoadBalancerFlowLog was null or undefined when calling datacentersNetworkloadbalancersFlowlogsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerFlowLog !== undefined ? networkLoadBalancerFlowLog : {})
                : (networkLoadBalancerFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified Network Load Balancer forwarding rule.
         * @summary Delete NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesDelete: async (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesDelete.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesDelete.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified Network Load Balance forwarding rule.
         * @summary Retrieve NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId: async (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the forwarding rules for the specified Network Load Balancer.
         * @summary List NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesGet: async (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesGet.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Network Load Balancer forwarding rule.
         * @summary Partially modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPatch: async (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPatch.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPatch.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPatch.');
            }
            if (networkLoadBalancerForwardingRuleProperties === null || networkLoadBalancerForwardingRuleProperties === undefined) {
                throw new RequiredError('networkLoadBalancerForwardingRuleProperties','Required parameter networkLoadBalancerForwardingRuleProperties was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerForwardingRuleProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerForwardingRuleProperties !== undefined ? networkLoadBalancerForwardingRuleProperties : {})
                : (networkLoadBalancerForwardingRuleProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a forwarding rule for the specified Network Load Balancer.
         * @summary Create NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPost: async (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPost.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPost.');
            }
            if (networkLoadBalancerForwardingRule === null || networkLoadBalancerForwardingRule === undefined) {
                throw new RequiredError('networkLoadBalancerForwardingRule','Required parameter networkLoadBalancerForwardingRule was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerForwardingRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerForwardingRule !== undefined ? networkLoadBalancerForwardingRule : {})
                : (networkLoadBalancerForwardingRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified Network Load Balancer forwarding rule.
         * @summary Modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPut: async (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPut.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPut.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPut.');
            }
            if (networkLoadBalancerForwardingRule === null || networkLoadBalancerForwardingRule === undefined) {
                throw new RequiredError('networkLoadBalancerForwardingRule','Required parameter networkLoadBalancerForwardingRule was null or undefined when calling datacentersNetworkloadbalancersForwardingrulesPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerForwardingRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerForwardingRule !== undefined ? networkLoadBalancerForwardingRule : {})
                : (networkLoadBalancerForwardingRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the Network Load Balancers within the data center.
         * @summary List Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersGet: async (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Network Load Balancer within the data center.
         * @summary Partially modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPatch: async (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersPatch.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersPatch.');
            }
            if (networkLoadBalancerProperties === null || networkLoadBalancerProperties === undefined) {
                throw new RequiredError('networkLoadBalancerProperties','Required parameter networkLoadBalancerProperties was null or undefined when calling datacentersNetworkloadbalancersPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancerProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancerProperties !== undefined ? networkLoadBalancerProperties : {})
                : (networkLoadBalancerProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Network Load Balancer within the data center.
         * @summary Create Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPost: async (datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersPost.');
            }
            if (networkLoadBalancer === null || networkLoadBalancer === undefined) {
                throw new RequiredError('networkLoadBalancer','Required parameter networkLoadBalancer was null or undefined when calling datacentersNetworkloadbalancersPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancer !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancer !== undefined ? networkLoadBalancer : {})
                : (networkLoadBalancer || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified Network Load Balancer within the data center.
         * @summary Modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPut: async (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNetworkloadbalancersPut.');
            }
            if (networkLoadBalancerId === null || networkLoadBalancerId === undefined) {
                throw new RequiredError('networkLoadBalancerId','Required parameter networkLoadBalancerId was null or undefined when calling datacentersNetworkloadbalancersPut.');
            }
            if (networkLoadBalancer === null || networkLoadBalancer === undefined) {
                throw new RequiredError('networkLoadBalancer','Required parameter networkLoadBalancer was null or undefined when calling datacentersNetworkloadbalancersPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"networkLoadBalancerId"}}`, encodeURIComponent(String(networkLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof networkLoadBalancer !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(networkLoadBalancer !== undefined ? networkLoadBalancer : {})
                : (networkLoadBalancer || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkLoadBalancersApi - functional programming interface
 * @export
 */
export const NetworkLoadBalancersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove the specified Network Load Balancer from the data center.
         * @summary Delete Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersDelete(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersDelete(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified Network Load Balancer within the data center.
         * @summary Retrieve Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified Network Load Balancer Flow Log.
         * @summary Delete NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsDelete(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsDelete(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the specified Network Load Balancer Flow Log.
         * @summary Retrieve NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all the Flow Logs for the specified Network Load Balancer.
         * @summary List NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Network Load Balancer Flow Log.
         * @summary Partially modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsPatch(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsPatch(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Add a new Flow Log for the Network Load Balancer.
         * @summary Create NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsPost(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified Network Load Balancer Flow Log.
         * @summary Modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersFlowlogsPut(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersFlowlogsPut(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified Network Load Balancer forwarding rule.
         * @summary Delete NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the specified Network Load Balance forwarding rule.
         * @summary Retrieve NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List the forwarding rules for the specified Network Load Balancer.
         * @summary List NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRules>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Network Load Balancer forwarding rule.
         * @summary Partially modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Create a forwarding rule for the specified Network Load Balancer.
         * @summary Create NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesPost(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified Network Load Balancer forwarding rule.
         * @summary Modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersForwardingrulesPut(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersForwardingrulesPut(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all the Network Load Balancers within the data center.
         * @summary List Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancers>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Network Load Balancer within the data center.
         * @summary Partially modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersPatch(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersPatch(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Create a Network Load Balancer within the data center.
         * @summary Create Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersPost(datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersPost(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified Network Load Balancer within the data center.
         * @summary Modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNetworkloadbalancersPut(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>> {
            const axiosArgs = await NetworkLoadBalancersApiAxiosParamCreator(configuration).datacentersNetworkloadbalancersPut(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * NetworkLoadBalancersApi - factory interface
 * @export
 */
export const NetworkLoadBalancersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove the specified Network Load Balancer from the data center.
         * @summary Delete Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersDelete(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersDelete(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified Network Load Balancer within the data center.
         * @summary Retrieve Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified Network Load Balancer Flow Log.
         * @summary Delete NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsDelete(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsDelete(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified Network Load Balancer Flow Log.
         * @summary Retrieve NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the Flow Logs for the specified Network Load Balancer.
         * @summary List NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLogs> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Network Load Balancer Flow Log.
         * @summary Partially modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPatch(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsPatch(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new Flow Log for the Network Load Balancer.
         * @summary Create NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsPost(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified Network Load Balancer Flow Log.
         * @summary Modify NLB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersFlowlogsPut(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersFlowlogsPut(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified Network Load Balancer forwarding rule.
         * @summary Delete NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified Network Load Balance forwarding rule.
         * @summary Retrieve NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List the forwarding rules for the specified Network Load Balancer.
         * @summary List NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRules> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Network Load Balancer forwarding rule.
         * @summary Partially modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a forwarding rule for the specified Network Load Balancer.
         * @summary Create NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesPost(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified Network Load Balancer forwarding rule.
         * @summary Modify NLB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersForwardingrulesPut(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersForwardingrulesPut(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the Network Load Balancers within the data center.
         * @summary List Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<NetworkLoadBalancers> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Network Load Balancer within the data center.
         * @summary Partially modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPatch(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersPatch(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Network Load Balancer within the data center.
         * @summary Create Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPost(datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersPost(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified Network Load Balancer within the data center.
         * @summary Modify Network Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
         * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNetworkloadbalancersPut(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer> {
            return NetworkLoadBalancersApiFp(configuration).datacentersNetworkloadbalancersPut(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersNetworkloadbalancersDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly networkLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFindByNetworkLoadBalancerId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly networkLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsFindByFlowLogId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly networkLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly flowLogId: string

    /**
     * The properties of the Flow Log to be updated.
     * @type {FlowLogProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly networkLoadBalancerFlowLogProperties: FlowLogProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly networkLoadBalancerId: string

    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly networkLoadBalancerFlowLog: FlowLog

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly flowLogId: string

    /**
     * The modified NLB Flow Log.
     * @type {FlowLogPut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly networkLoadBalancerFlowLog: FlowLogPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly forwardingRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly forwardingRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly networkLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly forwardingRuleId: string

    /**
     * The properties of the forwarding rule to be updated.
     * @type {NetworkLoadBalancerForwardingRuleProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly networkLoadBalancerId: string

    /**
     * The forwarding rule to create.
     * @type {NetworkLoadBalancerForwardingRule}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly networkLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly forwardingRuleId: string

    /**
     * The modified NLB forwarding rule.
     * @type {NetworkLoadBalancerForwardingRulePut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly datacenterId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly xContractNumber?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNetworkloadbalancersPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly networkLoadBalancerId: string

    /**
     * The properties of the Network Load Balancer to be updated.
     * @type {NetworkLoadBalancerProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly networkLoadBalancerProperties: NetworkLoadBalancerProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly datacenterId: string

    /**
     * The Network Load Balancer to create.
     * @type {NetworkLoadBalancer}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly networkLoadBalancer: NetworkLoadBalancer

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNetworkloadbalancersPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly networkLoadBalancerId: string

    /**
     * The modified Network Load Balancer.
     * @type {NetworkLoadBalancerPut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly networkLoadBalancer: NetworkLoadBalancerPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly xContractNumber?: number
}

/**
 * NetworkLoadBalancersApi - object-oriented interface
 * @export
 * @class NetworkLoadBalancersApi
 * @extends {BaseAPI}
 */
export class NetworkLoadBalancersApi extends BaseAPI {
    /**
     * Remove the specified Network Load Balancer from the data center.
     * @summary Delete Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersDelete(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @summary Retrieve Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified Network Load Balancer Flow Log.
     * @summary Delete NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsDelete(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified Network Load Balancer Flow Log.
     * @summary Retrieve NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the Flow Logs for the specified Network Load Balancer.
     * @summary List NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsGet(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @summary Partially modify NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsPatch(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.flowLogId, requestParameters.networkLoadBalancerFlowLogProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new Flow Log for the Network Load Balancer.
     * @summary Create NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsPost(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.networkLoadBalancerFlowLog, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified Network Load Balancer Flow Log.
     * @summary Modify NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersFlowlogsPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersFlowlogsPut(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.flowLogId, requestParameters.networkLoadBalancerFlowLog, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified Network Load Balancer forwarding rule.
     * @summary Delete NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesDelete(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified Network Load Balance forwarding rule.
     * @summary Retrieve NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the forwarding rules for the specified Network Load Balancer.
     * @summary List NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesGet(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @summary Partially modify NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesPatch(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.networkLoadBalancerForwardingRuleProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a forwarding rule for the specified Network Load Balancer.
     * @summary Create NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesPost(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.networkLoadBalancerForwardingRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified Network Load Balancer forwarding rule.
     * @summary Modify NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersForwardingrulesPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersForwardingrulesPut(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.networkLoadBalancerForwardingRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the Network Load Balancers within the data center.
     * @summary List Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Network Load Balancer within the data center.
     * @summary Partially modify Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersPatch(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.networkLoadBalancerProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Network Load Balancer within the data center.
     * @summary Create Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersPost(requestParameters.datacenterId, requestParameters.networkLoadBalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @summary Modify Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    public datacentersNetworkloadbalancersPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest, options?: any) {
        return NetworkLoadBalancersApiFp(this.configuration).datacentersNetworkloadbalancersPut(requestParameters.datacenterId, requestParameters.networkLoadBalancerId, requestParameters.networkLoadBalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
