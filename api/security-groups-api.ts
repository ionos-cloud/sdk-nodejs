/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { FirewallRule } from '../model';
// @ts-ignore
import { FirewallRules } from '../model';
// @ts-ignore
import { FirewallruleProperties } from '../model';
// @ts-ignore
import { ListOfIds } from '../model';
// @ts-ignore
import { SecurityGroup } from '../model';
// @ts-ignore
import { SecurityGroupProperties } from '../model';
// @ts-ignore
import { SecurityGroupRequest } from '../model';
// @ts-ignore
import { SecurityGroups } from '../model';
/**
 * SecurityGroupsApi - axios parameter creator
 * @export
 */
export const SecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes the specified Security Group.
         * @summary Delete a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsDelete: async (datacenterId: string, securityGroupId: string, pretty?: boolean,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsDelete.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attributes of a given Security Group.
         * @summary Retrieve a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFindById: async (datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsFindById.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsFindById.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specific Firewall Rule from the Security Group and delete the Firewall rule
         * @summary Remove a Firewall Rule from a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the firewall rule.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFirewallrulesDelete: async (datacenterId: string, securityGroupId: string, ruleId: string,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsFirewallrulesDelete.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsFirewallrulesDelete.');
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling datacentersSecuritygroupsFirewallrulesDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules/{ruleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create one firewall rule and attach it to the existing security group
         * @summary Create Firewall rule to a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {FirewallRule} firewallRule The firewall to be attached (or created and attached).
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFirewallrulesPost: async (datacenterId: string, securityGroupId: string, firewallRule: FirewallRule,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsFirewallrulesPost.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsFirewallrulesPost.');
            }
            if (firewallRule === null || firewallRule === undefined) {
                throw new RequiredError('firewallRule','Required parameter firewallRule was null or undefined when calling datacentersSecuritygroupsFirewallrulesPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof firewallRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(firewallRule !== undefined ? firewallRule : {})
                : (firewallRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of available security groups.
         * @summary List Security Groups
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsGet: async (datacenterId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }

    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Partially modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupProperties} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPatch: async (datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupProperties, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsPatch.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsPatch.');
            }
            if (securityGroup === null || securityGroup === undefined) {
                throw new RequiredError('securityGroup','Required parameter securityGroup was null or undefined when calling datacentersSecuritygroupsPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof securityGroup !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(securityGroup !== undefined ? securityGroup : {})
                : (securityGroup || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a security group within the data center. This will allow you to define which IP addresses and networks have access to your servers.
         * @summary Create a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {SecurityGroupRequest} securityGroup The security group to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPost: async (datacenterId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsPost.');
            }
            if (securityGroup === null || securityGroup === undefined) {
                throw new RequiredError('securityGroup','Required parameter securityGroup was null or undefined when calling datacentersSecuritygroupsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof securityGroup !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(securityGroup !== undefined ? securityGroup : {})
                : (securityGroup || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupRequest} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPut: async (datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsPut.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsPut.');
            }
            if (securityGroup === null || securityGroup === undefined) {
                throw new RequiredError('securityGroup','Required parameter securityGroup was null or undefined when calling datacentersSecuritygroupsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof securityGroup !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(securityGroup !== undefined ? securityGroup : {})
                : (securityGroup || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified Security Group rule.
         * @summary Retrieve security group rule by id
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {string} ruleId The unique ID of the Security Group rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesFindById: async (datacenterId: string, securityGroupId: string, ruleId: string, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsRulesFindById.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsRulesFindById.');
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling datacentersSecuritygroupsRulesFindById.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules/{ruleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all rules for the specified Security Group.
         * @summary List Security Group rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesGet: async (datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsRulesGet.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsRulesGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }

    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Security Group rule.
         * @summary Partially modify Security Group Rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallruleProperties} rule The properties of the Security Group Rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesPatch: async (datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallruleProperties, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsRulesPatch.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsRulesPatch.');
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling datacentersSecuritygroupsRulesPatch.');
            }
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling datacentersSecuritygroupsRulesPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules/{ruleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof rule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(rule !== undefined ? rule : {})
                : (rule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the properties of the specified Security Group Rule.
         * @summary Modify a Security Group Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallRule} rule The modified Security Group Rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesPut: async (datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallRule, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersSecuritygroupsRulesPut.');
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId','Required parameter securityGroupId was null or undefined when calling datacentersSecuritygroupsRulesPut.');
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling datacentersSecuritygroupsRulesPut.');
            }
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling datacentersSecuritygroupsRulesPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/securitygroups/{securityGroupId}/rules/{ruleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"securityGroupId"}}`, encodeURIComponent(String(securityGroupId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof rule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(rule !== undefined ? rule : {})
                : (rule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updating the list of Security Groups attached to an existing NIC specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a NIC
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {string} nicId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of NIC attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsSecuritygroupsPut: async (datacenterId: string, serverId: string, nicId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsSecuritygroupsPut.');
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsSecuritygroupsPut.');
            }
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsSecuritygroupsPut.');
            }
            if (securitygroups === null || securitygroups === undefined) {
                throw new RequiredError('securitygroups','Required parameter securitygroups was null or undefined when calling datacentersServersNicsSecuritygroupsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/securitygroups`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof securitygroups !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(securitygroups !== undefined ? securitygroups : {})
                : (securitygroups || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updating the list of Security Groups attached to an existing server specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a Server
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of server attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersSecuritygroupsPut: async (datacenterId: string, serverId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersSecuritygroupsPut.');
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersSecuritygroupsPut.');
            }
            if (securitygroups === null || securitygroups === undefined) {
                throw new RequiredError('securitygroups','Required parameter securitygroups was null or undefined when calling datacentersServersSecuritygroupsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/securitygroups`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuthentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication TokenAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof securitygroups !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(securitygroups !== undefined ? securitygroups : {})
                : (securitygroups || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityGroupsApi - functional programming interface
 * @export
 */
export const SecurityGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes the specified Security Group.
         * @summary Delete a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsDelete(datacenterId: string, securityGroupId: string, pretty?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsDelete(datacenterId, securityGroupId, pretty, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the attributes of a given Security Group.
         * @summary Retrieve a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsFindById(datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsFindById(datacenterId, securityGroupId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Removes the specific Firewall Rule from the Security Group and delete the Firewall rule
         * @summary Remove a Firewall Rule from a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the firewall rule.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsFirewallrulesDelete(datacenterId: string, securityGroupId: string, ruleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsFirewallrulesDelete(datacenterId, securityGroupId, ruleId, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Create one firewall rule and attach it to the existing security group
         * @summary Create Firewall rule to a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {FirewallRule} firewallRule The firewall to be attached (or created and attached).
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsFirewallrulesPost(datacenterId: string, securityGroupId: string, firewallRule: FirewallRule, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsFirewallrulesPost(datacenterId, securityGroupId, firewallRule, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve a list of available security groups.
         * @summary List Security Groups
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsGet(datacenterId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroups>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsGet(datacenterId, pretty, depth, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Partially modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupProperties} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsPatch(datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsPatch(datacenterId, securityGroupId, securityGroup, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Creates a security group within the data center. This will allow you to define which IP addresses and networks have access to your servers.
         * @summary Create a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {SecurityGroupRequest} securityGroup The security group to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsPost(datacenterId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsPost(datacenterId, securityGroup, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupRequest} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsPut(datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsPut(datacenterId, securityGroupId, securityGroup, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified Security Group rule.
         * @summary Retrieve security group rule by id
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {string} ruleId The unique ID of the Security Group rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsRulesFindById(datacenterId: string, securityGroupId: string, ruleId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsRulesFindById(datacenterId, securityGroupId, ruleId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all rules for the specified Security Group.
         * @summary List Security Group rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsRulesGet(datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRules>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsRulesGet(datacenterId, securityGroupId, pretty, depth, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Security Group rule.
         * @summary Partially modify Security Group Rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallruleProperties} rule The properties of the Security Group Rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsRulesPatch(datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallruleProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsRulesPatch(datacenterId, securityGroupId, ruleId, rule, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modifies the properties of the specified Security Group Rule.
         * @summary Modify a Security Group Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallRule} rule The modified Security Group Rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersSecuritygroupsRulesPut(datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallRule, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersSecuritygroupsRulesPut(datacenterId, securityGroupId, ruleId, rule, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Updating the list of Security Groups attached to an existing NIC specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a NIC
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {string} nicId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of NIC attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsSecuritygroupsPut(datacenterId: string, serverId: string, nicId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroups>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersServersNicsSecuritygroupsPut(datacenterId, serverId, nicId, securitygroups, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Updating the list of Security Groups attached to an existing server specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a Server
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of server attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersSecuritygroupsPut(datacenterId: string, serverId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroups>> {
            const axiosArgs = await SecurityGroupsApiAxiosParamCreator(configuration).datacentersServersSecuritygroupsPut(datacenterId, serverId, securitygroups, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * SecurityGroupsApi - factory interface
 * @export
 */
export const SecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes the specified Security Group.
         * @summary Delete a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsDelete(datacenterId: string, securityGroupId: string, pretty?: boolean, options?: any): AxiosPromise<void> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsDelete(datacenterId, securityGroupId, pretty, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attributes of a given Security Group.
         * @summary Retrieve a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFindById(datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroup> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsFindById(datacenterId, securityGroupId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specific Firewall Rule from the Security Group and delete the Firewall rule
         * @summary Remove a Firewall Rule from a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the firewall rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFirewallrulesDelete(datacenterId: string, securityGroupId: string, ruleId: string, options?: any): AxiosPromise<void> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsFirewallrulesDelete(datacenterId, securityGroupId, ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create one firewall rule and attach it to the existing security group
         * @summary Create Firewall rule to a Security Group
         * @param {string} datacenterId The unique ID of the data center
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {FirewallRule} firewallRule The firewall to be attached (or created and attached).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsFirewallrulesPost(datacenterId: string, securityGroupId: string, firewallRule: FirewallRule, options?: any): AxiosPromise<FirewallRule> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsFirewallrulesPost(datacenterId, securityGroupId, firewallRule, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of available security groups.
         * @summary List Security Groups
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsGet(datacenterId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<SecurityGroups> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsGet(datacenterId, pretty, depth, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Partially modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupProperties} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPatch(datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroup> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsPatch(datacenterId, securityGroupId, securityGroup, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a security group within the data center. This will allow you to define which IP addresses and networks have access to your servers.
         * @summary Create a Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {SecurityGroupRequest} securityGroup The security group to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPost(datacenterId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroup> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsPost(datacenterId, securityGroup, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified Security Group within the data center.
         * @summary Modify Security Group
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {SecurityGroupRequest} securityGroup The modified Security Group
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsPut(datacenterId: string, securityGroupId: string, securityGroup: SecurityGroupRequest, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroup> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsPut(datacenterId, securityGroupId, securityGroup, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified Security Group rule.
         * @summary Retrieve security group rule by id
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the Security Group.
         * @param {string} ruleId The unique ID of the Security Group rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesFindById(datacenterId: string, securityGroupId: string, ruleId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FirewallRule> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsRulesFindById(datacenterId, securityGroupId, ruleId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * List all rules for the specified Security Group.
         * @summary List Security Group rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesGet(datacenterId: string, securityGroupId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FirewallRules> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsRulesGet(datacenterId, securityGroupId, pretty, depth, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Security Group rule.
         * @summary Partially modify Security Group Rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallruleProperties} rule The properties of the Security Group Rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesPatch(datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallruleProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FirewallRule> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsRulesPatch(datacenterId, securityGroupId, ruleId, rule, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the properties of the specified Security Group Rule.
         * @summary Modify a Security Group Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} securityGroupId The unique ID of the security group.
         * @param {string} ruleId The unique ID of the Security Group Rule.
         * @param {FirewallRule} rule The modified Security Group Rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersSecuritygroupsRulesPut(datacenterId: string, securityGroupId: string, ruleId: string, rule: FirewallRule, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FirewallRule> {
            return SecurityGroupsApiFp(configuration).datacentersSecuritygroupsRulesPut(datacenterId, securityGroupId, ruleId, rule, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Updating the list of Security Groups attached to an existing NIC specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a NIC
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {string} nicId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of NIC attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsSecuritygroupsPut(datacenterId: string, serverId: string, nicId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroups> {
            return SecurityGroupsApiFp(configuration).datacentersServersNicsSecuritygroupsPut(datacenterId, serverId, nicId, securitygroups, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Updating the list of Security Groups attached to an existing server specified by its ID.  Security Groups should already exist as part of the datacenter.
         * @summary Attach a list of Security Groups to a Server
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server.
         * @param {ListOfIds} securitygroups The list of server attached Security Groups IDs.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersSecuritygroupsPut(datacenterId: string, serverId: string, securitygroups: ListOfIds, pretty?: boolean, depth?: number, options?: any): AxiosPromise<SecurityGroups> {
            return SecurityGroupsApiFp(configuration).datacentersServersSecuritygroupsPut(datacenterId, serverId, securitygroups, pretty, depth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersSecuritygroupsDelete operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsDeleteRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Security Group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsDelete
     */
    readonly securityGroupId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsDelete
     */
    readonly pretty?: boolean
}

/**
 * Request parameters for datacentersSecuritygroupsFindById operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsFindByIdRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsFindByIdRequest {
    /**
     * The unique ID of the data center
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFindById
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFindById
     */
    readonly securityGroupId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsFirewallrulesDelete operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDeleteRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDeleteRequest {
    /**
     * The unique ID of the data center
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDelete
     */
    readonly securityGroupId: string

    /**
     * The unique ID of the firewall rule.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDelete
     */
    readonly ruleId: string
}

/**
 * Request parameters for datacentersSecuritygroupsFirewallrulesPost operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPostRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPostRequest {
    /**
     * The unique ID of the data center
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPost
     */
    readonly securityGroupId: string

    /**
     * The firewall to be attached (or created and attached).
     * @type {FirewallRule}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPost
     */
    readonly firewallRule: FirewallRule
}

/**
 * Request parameters for datacentersSecuritygroupsGet operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsGetRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly datacenterId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly depth?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersSecuritygroupsPatch operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsPatchRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Security Group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPatch
     */
    readonly securityGroupId: string

    /**
     * The modified Security Group
     * @type {SecurityGroupProperties}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPatch
     */
    readonly securityGroup: SecurityGroupProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPatch
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsPost operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsPostRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPost
     */
    readonly datacenterId: string

    /**
     * The security group to be created
     * @type {SecurityGroupRequest}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPost
     */
    readonly securityGroup: SecurityGroupRequest

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPost
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsPut operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsPutRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Security Group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPut
     */
    readonly securityGroupId: string

    /**
     * The modified Security Group
     * @type {SecurityGroupRequest}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPut
     */
    readonly securityGroup: SecurityGroupRequest

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsPut
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsRulesFindById operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsRulesFindByIdRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsRulesFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesFindById
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Security Group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesFindById
     */
    readonly securityGroupId: string

    /**
     * The unique ID of the Security Group rule.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesFindById
     */
    readonly ruleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsRulesGet operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsRulesGetRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsRulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly securityGroupId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly depth?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersSecuritygroupsRulesPatch operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsRulesPatchRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsRulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly securityGroupId: string

    /**
     * The unique ID of the Security Group Rule.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly ruleId: string

    /**
     * The properties of the Security Group Rule to be updated.
     * @type {FirewallruleProperties}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly rule: FirewallruleProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPatch
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersSecuritygroupsRulesPut operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersSecuritygroupsRulesPutRequest
 */
export interface SecurityGroupsApiDatacentersSecuritygroupsRulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the security group.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly securityGroupId: string

    /**
     * The unique ID of the Security Group Rule.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly ruleId: string

    /**
     * The modified Security Group Rule.
     * @type {FirewallRule}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly rule: FirewallRule

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersSecuritygroupsRulesPut
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersNicsSecuritygroupsPut operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersServersNicsSecuritygroupsPutRequest
 */
export interface SecurityGroupsApiDatacentersServersNicsSecuritygroupsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly serverId: string

    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly nicId: string

    /**
     * The list of NIC attached Security Groups IDs.
     * @type {ListOfIds}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly securitygroups: ListOfIds

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersServersNicsSecuritygroupsPut
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersSecuritygroupsPut operation in SecurityGroupsApi.
 * @export
 * @interface SecurityGroupsApiDatacentersServersSecuritygroupsPutRequest
 */
export interface SecurityGroupsApiDatacentersServersSecuritygroupsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersServersSecuritygroupsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof SecurityGroupsApiDatacentersServersSecuritygroupsPut
     */
    readonly serverId: string

    /**
     * The list of server attached Security Groups IDs.
     * @type {ListOfIds}
     * @memberof SecurityGroupsApiDatacentersServersSecuritygroupsPut
     */
    readonly securitygroups: ListOfIds

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof SecurityGroupsApiDatacentersServersSecuritygroupsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects. GET /datacenters/[ID]   - depth&#x3D;0: Only direct properties are included;              children (servers and other elements) are not included.   - depth&#x3D;1: Direct properties and children references are included.   - depth&#x3D;2: Direct properties and children properties are included.   - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.   - depth&#x3D;... and so on
     * @type {number}
     * @memberof SecurityGroupsApiDatacentersServersSecuritygroupsPut
     */
    readonly depth?: number
}

/**
 * SecurityGroupsApi - object-oriented interface
 * @export
 * @class SecurityGroupsApi
 * @extends {BaseAPI}
 */
export class SecurityGroupsApi extends BaseAPI {
    /**
     * Deletes the specified Security Group.
     * @summary Delete a Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsDelete(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsDeleteRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsDelete(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.pretty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attributes of a given Security Group.
     * @summary Retrieve a Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsFindById(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsFindByIdRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsFindById(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specific Firewall Rule from the Security Group and delete the Firewall rule
     * @summary Remove a Firewall Rule from a Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsFirewallrulesDelete(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesDeleteRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsFirewallrulesDelete(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create one firewall rule and attach it to the existing security group
     * @summary Create Firewall rule to a Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsFirewallrulesPost(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsFirewallrulesPostRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsFirewallrulesPost(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.firewallRule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of available security groups.
     * @summary List Security Groups
     * @param {SecurityGroupsApiDatacentersSecuritygroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsGet(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsGetRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified Security Group within the data center.
     * @summary Partially modify Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsPatch(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsPatchRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsPatch(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.securityGroup, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a security group within the data center. This will allow you to define which IP addresses and networks have access to your servers.
     * @summary Create a Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsPost(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsPostRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsPost(requestParameters.datacenterId, requestParameters.securityGroup, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified Security Group within the data center.
     * @summary Modify Security Group
     * @param {SecurityGroupsApiDatacentersSecuritygroupsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsPut(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsPutRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsPut(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.securityGroup, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified Security Group rule.
     * @summary Retrieve security group rule by id
     * @param {SecurityGroupsApiDatacentersSecuritygroupsRulesFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsRulesFindById(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsRulesFindByIdRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsRulesFindById(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.ruleId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all rules for the specified Security Group.
     * @summary List Security Group rules
     * @param {SecurityGroupsApiDatacentersSecuritygroupsRulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsRulesGet(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsRulesGetRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsRulesGet(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.pretty, requestParameters.depth, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Security Group rule.
     * @summary Partially modify Security Group Rules
     * @param {SecurityGroupsApiDatacentersSecuritygroupsRulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsRulesPatch(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsRulesPatchRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsRulesPatch(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.ruleId, requestParameters.rule, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the properties of the specified Security Group Rule.
     * @summary Modify a Security Group Rule
     * @param {SecurityGroupsApiDatacentersSecuritygroupsRulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersSecuritygroupsRulesPut(requestParameters: SecurityGroupsApiDatacentersSecuritygroupsRulesPutRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersSecuritygroupsRulesPut(requestParameters.datacenterId, requestParameters.securityGroupId, requestParameters.ruleId, requestParameters.rule, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updating the list of Security Groups attached to an existing NIC specified by its ID.  Security Groups should already exist as part of the datacenter.
     * @summary Attach a list of Security Groups to a NIC
     * @param {SecurityGroupsApiDatacentersServersNicsSecuritygroupsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersServersNicsSecuritygroupsPut(requestParameters: SecurityGroupsApiDatacentersServersNicsSecuritygroupsPutRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersServersNicsSecuritygroupsPut(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.securitygroups, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updating the list of Security Groups attached to an existing server specified by its ID.  Security Groups should already exist as part of the datacenter.
     * @summary Attach a list of Security Groups to a Server
     * @param {SecurityGroupsApiDatacentersServersSecuritygroupsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    public datacentersServersSecuritygroupsPut(requestParameters: SecurityGroupsApiDatacentersServersSecuritygroupsPutRequest, options?: any) {
        return SecurityGroupsApiFp(this.configuration).datacentersServersSecuritygroupsPut(requestParameters.datacenterId, requestParameters.serverId, requestParameters.securitygroups, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }
}
