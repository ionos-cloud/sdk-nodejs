/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { ApplicationLoadBalancer } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerForwardingRule } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerForwardingRuleProperties } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerForwardingRulePut } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerForwardingRules } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerProperties } from '../model';
// @ts-ignore
import { ApplicationLoadBalancerPut } from '../model';
// @ts-ignore
import { ApplicationLoadBalancers } from '../model';
// @ts-ignore
import { FlowLog } from '../model';
// @ts-ignore
import { FlowLogProperties } from '../model';
// @ts-ignore
import { FlowLogPut } from '../model';
// @ts-ignore
import { FlowLogs } from '../model';
/**
 * ApplicationLoadBalancersApi - axios parameter creator
 * @export
 */
export const ApplicationLoadBalancersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified Application Load Balancer from the data center..
         * @summary Delete Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersDelete: async (datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersDelete.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified Application Load Balancer within the data center.
         * @summary Retrieve Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFindByApplicationLoadBalancerId: async (datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFindByApplicationLoadBalancerId.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFindByApplicationLoadBalancerId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified Application Load Balancer Flow Log.
         * @summary Delete ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsDelete: async (datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsDelete.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsDelete.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified Application Load Balancer Flow Log.
         * @summary Retrieve ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsFindByFlowLogId: async (datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsFindByFlowLogId.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsFindByFlowLogId.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsFindByFlowLogId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the Flow Logs for the specified Application Load Balancer.
         * @summary List ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsGet: async (datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsGet.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Application Load Balancer Flow Log.
         * @summary Partially modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} applicationLoadBalancerFlowLogProperties The properties of the ALB Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPatch: async (datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPatch.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPatch.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPatch.');
            }
            if (applicationLoadBalancerFlowLogProperties === null || applicationLoadBalancerFlowLogProperties === undefined) {
                throw new RequiredError('applicationLoadBalancerFlowLogProperties','Required parameter applicationLoadBalancerFlowLogProperties was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerFlowLogProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerFlowLogProperties !== undefined ? applicationLoadBalancerFlowLogProperties : {})
                : (applicationLoadBalancerFlowLogProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new Flow Log for the Application Load Balancer.
         * @summary Create ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {FlowLog} applicationLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPost: async (datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPost.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPost.');
            }
            if (applicationLoadBalancerFlowLog === null || applicationLoadBalancerFlowLog === undefined) {
                throw new RequiredError('applicationLoadBalancerFlowLog','Required parameter applicationLoadBalancerFlowLog was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerFlowLog !== undefined ? applicationLoadBalancerFlowLog : {})
                : (applicationLoadBalancerFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified Application Load Balancer Flow Log.
         * @summary Modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} applicationLoadBalancerFlowLog The modified ALB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPut: async (datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPut.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPut.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPut.');
            }
            if (applicationLoadBalancerFlowLog === null || applicationLoadBalancerFlowLog === undefined) {
                throw new RequiredError('applicationLoadBalancerFlowLog','Required parameter applicationLoadBalancerFlowLog was null or undefined when calling datacentersApplicationloadbalancersFlowlogsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerFlowLog !== undefined ? applicationLoadBalancerFlowLog : {})
                : (applicationLoadBalancerFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified Application Load Balancer forwarding rule.
         * @summary Delete ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesDelete: async (datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesDelete.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesDelete.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified Application Load Balancer forwarding rule.
         * @summary Retrieve ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId: async (datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the forwarding rules for the specified Application Load Balancer.
         * @summary List ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesGet: async (datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesGet.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Application Load Balancer forwarding rule.
         * @summary Partially modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRuleProperties} applicationLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPatch: async (datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRuleProperties: ApplicationLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPatch.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPatch.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPatch.');
            }
            if (applicationLoadBalancerForwardingRuleProperties === null || applicationLoadBalancerForwardingRuleProperties === undefined) {
                throw new RequiredError('applicationLoadBalancerForwardingRuleProperties','Required parameter applicationLoadBalancerForwardingRuleProperties was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerForwardingRuleProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerForwardingRuleProperties !== undefined ? applicationLoadBalancerForwardingRuleProperties : {})
                : (applicationLoadBalancerForwardingRuleProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a forwarding rule for the Application Load Balancer.
         * @summary Create ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerForwardingRule} applicationLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPost: async (datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPost.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPost.');
            }
            if (applicationLoadBalancerForwardingRule === null || applicationLoadBalancerForwardingRule === undefined) {
                throw new RequiredError('applicationLoadBalancerForwardingRule','Required parameter applicationLoadBalancerForwardingRule was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerForwardingRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerForwardingRule !== undefined ? applicationLoadBalancerForwardingRule : {})
                : (applicationLoadBalancerForwardingRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified Application Load Balancer forwarding rule.
         * @summary Modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRulePut} applicationLoadBalancerForwardingRule The modified ALB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPut: async (datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPut.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPut.');
            }
            if (forwardingRuleId === null || forwardingRuleId === undefined) {
                throw new RequiredError('forwardingRuleId','Required parameter forwardingRuleId was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPut.');
            }
            if (applicationLoadBalancerForwardingRule === null || applicationLoadBalancerForwardingRule === undefined) {
                throw new RequiredError('applicationLoadBalancerForwardingRule','Required parameter applicationLoadBalancerForwardingRule was null or undefined when calling datacentersApplicationloadbalancersForwardingrulesPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}/forwardingrules/{forwardingRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)))
                .replace(`{${"forwardingRuleId"}}`, encodeURIComponent(String(forwardingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerForwardingRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerForwardingRule !== undefined ? applicationLoadBalancerForwardingRule : {})
                : (applicationLoadBalancerForwardingRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Application Load Balancers within the data center.
         * @summary List Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersGet: async (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified Application Load Balancer within the data center.
         * @summary Partially modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerProperties} applicationLoadBalancerProperties The Application Load Balancer properties to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPatch: async (datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerProperties: ApplicationLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersPatch.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersPatch.');
            }
            if (applicationLoadBalancerProperties === null || applicationLoadBalancerProperties === undefined) {
                throw new RequiredError('applicationLoadBalancerProperties','Required parameter applicationLoadBalancerProperties was null or undefined when calling datacentersApplicationloadbalancersPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancerProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancerProperties !== undefined ? applicationLoadBalancerProperties : {})
                : (applicationLoadBalancerProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Application Load Balancer within the datacenter.
         * @summary Create Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {ApplicationLoadBalancer} applicationLoadBalancer The Application Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPost: async (datacenterId: string, applicationLoadBalancer: ApplicationLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersPost.');
            }
            if (applicationLoadBalancer === null || applicationLoadBalancer === undefined) {
                throw new RequiredError('applicationLoadBalancer','Required parameter applicationLoadBalancer was null or undefined when calling datacentersApplicationloadbalancersPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancer !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancer !== undefined ? applicationLoadBalancer : {})
                : (applicationLoadBalancer || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified Application Load Balancer within the data center.
         * @summary Modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerPut} applicationLoadBalancer The modified Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPut: async (datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancer: ApplicationLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersApplicationloadbalancersPut.');
            }
            if (applicationLoadBalancerId === null || applicationLoadBalancerId === undefined) {
                throw new RequiredError('applicationLoadBalancerId','Required parameter applicationLoadBalancerId was null or undefined when calling datacentersApplicationloadbalancersPut.');
            }
            if (applicationLoadBalancer === null || applicationLoadBalancer === undefined) {
                throw new RequiredError('applicationLoadBalancer','Required parameter applicationLoadBalancer was null or undefined when calling datacentersApplicationloadbalancersPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/applicationloadbalancers/{applicationLoadBalancerId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"applicationLoadBalancerId"}}`, encodeURIComponent(String(applicationLoadBalancerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof applicationLoadBalancer !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(applicationLoadBalancer !== undefined ? applicationLoadBalancer : {})
                : (applicationLoadBalancer || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationLoadBalancersApi - functional programming interface
 * @export
 */
export const ApplicationLoadBalancersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove the specified Application Load Balancer from the data center..
         * @summary Delete Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersDelete(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersDelete(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified Application Load Balancer within the data center.
         * @summary Retrieve Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancer>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified Application Load Balancer Flow Log.
         * @summary Delete ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsDelete(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsDelete(datacenterId, applicationLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the specified Application Load Balancer Flow Log.
         * @summary Retrieve ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(datacenterId, applicationLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List the Flow Logs for the specified Application Load Balancer.
         * @summary List ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsGet(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsGet(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Application Load Balancer Flow Log.
         * @summary Partially modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} applicationLoadBalancerFlowLogProperties The properties of the ALB Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsPatch(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsPatch(datacenterId, applicationLoadBalancerId, flowLogId, applicationLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Add a new Flow Log for the Application Load Balancer.
         * @summary Create ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {FlowLog} applicationLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsPost(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsPost(datacenterId, applicationLoadBalancerId, applicationLoadBalancerFlowLog, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified Application Load Balancer Flow Log.
         * @summary Modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} applicationLoadBalancerFlowLog The modified ALB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersFlowlogsPut(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersFlowlogsPut(datacenterId, applicationLoadBalancerId, flowLogId, applicationLoadBalancerFlowLog, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified Application Load Balancer forwarding rule.
         * @summary Delete ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesDelete(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesDelete(datacenterId, applicationLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the specified Application Load Balancer forwarding rule.
         * @summary Retrieve ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancerForwardingRule>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId, applicationLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List the forwarding rules for the specified Application Load Balancer.
         * @summary List ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesGet(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancerForwardingRules>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesGet(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Application Load Balancer forwarding rule.
         * @summary Partially modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRuleProperties} applicationLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesPatch(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRuleProperties: ApplicationLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancerForwardingRule>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesPatch(datacenterId, applicationLoadBalancerId, forwardingRuleId, applicationLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Create a forwarding rule for the Application Load Balancer.
         * @summary Create ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerForwardingRule} applicationLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesPost(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancerForwardingRule>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesPost(datacenterId, applicationLoadBalancerId, applicationLoadBalancerForwardingRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified Application Load Balancer forwarding rule.
         * @summary Modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRulePut} applicationLoadBalancerForwardingRule The modified ALB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersForwardingrulesPut(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancerForwardingRule>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersForwardingrulesPut(datacenterId, applicationLoadBalancerId, forwardingRuleId, applicationLoadBalancerForwardingRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all Application Load Balancers within the data center.
         * @summary List Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancers>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified Application Load Balancer within the data center.
         * @summary Partially modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerProperties} applicationLoadBalancerProperties The Application Load Balancer properties to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersPatch(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerProperties: ApplicationLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancer>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersPatch(datacenterId, applicationLoadBalancerId, applicationLoadBalancerProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Create an Application Load Balancer within the datacenter.
         * @summary Create Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {ApplicationLoadBalancer} applicationLoadBalancer The Application Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersPost(datacenterId: string, applicationLoadBalancer: ApplicationLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancer>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersPost(datacenterId, applicationLoadBalancer, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified Application Load Balancer within the data center.
         * @summary Modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerPut} applicationLoadBalancer The modified Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersApplicationloadbalancersPut(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancer: ApplicationLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLoadBalancer>> {
            const axiosArgs = await ApplicationLoadBalancersApiAxiosParamCreator(configuration).datacentersApplicationloadbalancersPut(datacenterId, applicationLoadBalancerId, applicationLoadBalancer, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * ApplicationLoadBalancersApi - factory interface
 * @export
 */
export const ApplicationLoadBalancersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove the specified Application Load Balancer from the data center..
         * @summary Delete Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersDelete(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersDelete(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified Application Load Balancer within the data center.
         * @summary Retrieve Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancer> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified Application Load Balancer Flow Log.
         * @summary Delete ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsDelete(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsDelete(datacenterId, applicationLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified Application Load Balancer Flow Log.
         * @summary Retrieve ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(datacenterId, applicationLoadBalancerId, flowLogId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List the Flow Logs for the specified Application Load Balancer.
         * @summary List ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsGet(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLogs> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsGet(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Application Load Balancer Flow Log.
         * @summary Partially modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} applicationLoadBalancerFlowLogProperties The properties of the ALB Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPatch(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsPatch(datacenterId, applicationLoadBalancerId, flowLogId, applicationLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new Flow Log for the Application Load Balancer.
         * @summary Create ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {FlowLog} applicationLoadBalancerFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPost(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsPost(datacenterId, applicationLoadBalancerId, applicationLoadBalancerFlowLog, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified Application Load Balancer Flow Log.
         * @summary Modify ALB Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} applicationLoadBalancerFlowLog The modified ALB Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersFlowlogsPut(datacenterId: string, applicationLoadBalancerId: string, flowLogId: string, applicationLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersFlowlogsPut(datacenterId, applicationLoadBalancerId, flowLogId, applicationLoadBalancerFlowLog, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified Application Load Balancer forwarding rule.
         * @summary Delete ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesDelete(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesDelete(datacenterId, applicationLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified Application Load Balancer forwarding rule.
         * @summary Retrieve ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancerForwardingRule> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId, applicationLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List the forwarding rules for the specified Application Load Balancer.
         * @summary List ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesGet(datacenterId: string, applicationLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancerForwardingRules> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesGet(datacenterId, applicationLoadBalancerId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Application Load Balancer forwarding rule.
         * @summary Partially modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRuleProperties} applicationLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPatch(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRuleProperties: ApplicationLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancerForwardingRule> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesPatch(datacenterId, applicationLoadBalancerId, forwardingRuleId, applicationLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a forwarding rule for the Application Load Balancer.
         * @summary Create ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerForwardingRule} applicationLoadBalancerForwardingRule The forwarding rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPost(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancerForwardingRule> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesPost(datacenterId, applicationLoadBalancerId, applicationLoadBalancerForwardingRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified Application Load Balancer forwarding rule.
         * @summary Modify ALB forwarding rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {string} forwardingRuleId The unique ID of the forwarding rule.
         * @param {ApplicationLoadBalancerForwardingRulePut} applicationLoadBalancerForwardingRule The modified ALB forwarding rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersForwardingrulesPut(datacenterId: string, applicationLoadBalancerId: string, forwardingRuleId: string, applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancerForwardingRule> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersForwardingrulesPut(datacenterId, applicationLoadBalancerId, forwardingRuleId, applicationLoadBalancerForwardingRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Application Load Balancers within the data center.
         * @summary List Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<ApplicationLoadBalancers> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified Application Load Balancer within the data center.
         * @summary Partially modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerProperties} applicationLoadBalancerProperties The Application Load Balancer properties to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPatch(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancerProperties: ApplicationLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancer> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersPatch(datacenterId, applicationLoadBalancerId, applicationLoadBalancerProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Application Load Balancer within the datacenter.
         * @summary Create Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {ApplicationLoadBalancer} applicationLoadBalancer The Application Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPost(datacenterId: string, applicationLoadBalancer: ApplicationLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancer> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersPost(datacenterId, applicationLoadBalancer, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified Application Load Balancer within the data center.
         * @summary Modify Application Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} applicationLoadBalancerId The unique ID of the Application Load Balancer.
         * @param {ApplicationLoadBalancerPut} applicationLoadBalancer The modified Application Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersApplicationloadbalancersPut(datacenterId: string, applicationLoadBalancerId: string, applicationLoadBalancer: ApplicationLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<ApplicationLoadBalancer> {
            return ApplicationLoadBalancersApiFp(configuration).datacentersApplicationloadbalancersPut(datacenterId, applicationLoadBalancerId, applicationLoadBalancer, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersApplicationloadbalancersDelete operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDeleteRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDelete
     */
    readonly applicationLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFindByApplicationLoadBalancerId operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerIdRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerId
     */
    readonly applicationLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsDelete operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDeleteRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsFindByFlowLogId operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogIdRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsGet operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGetRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly applicationLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsPatch operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatchRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly flowLogId: string

    /**
     * The properties of the ALB Flow Log to be updated.
     * @type {FlowLogProperties}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly applicationLoadBalancerFlowLogProperties: FlowLogProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsPost operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPostRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly applicationLoadBalancerId: string

    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly applicationLoadBalancerFlowLog: FlowLog

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersFlowlogsPut operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPutRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly flowLogId: string

    /**
     * The modified ALB Flow Log.
     * @type {FlowLogPut}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly applicationLoadBalancerFlowLog: FlowLogPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPut
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesDelete operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDeleteRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly forwardingRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleIdRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly forwardingRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesGet operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGetRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly applicationLoadBalancerId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesPatch operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatchRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly forwardingRuleId: string

    /**
     * The properties of the forwarding rule to be updated.
     * @type {ApplicationLoadBalancerForwardingRuleProperties}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly applicationLoadBalancerForwardingRuleProperties: ApplicationLoadBalancerForwardingRuleProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesPost operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPostRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly applicationLoadBalancerId: string

    /**
     * The forwarding rule to create.
     * @type {ApplicationLoadBalancerForwardingRule}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRule

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersForwardingrulesPut operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPutRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly applicationLoadBalancerId: string

    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly forwardingRuleId: string

    /**
     * The modified ALB forwarding rule.
     * @type {ApplicationLoadBalancerForwardingRulePut}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly applicationLoadBalancerForwardingRule: ApplicationLoadBalancerForwardingRulePut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPut
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersGet operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGetRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly datacenterId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly xContractNumber?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersApplicationloadbalancersPatch operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatchRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly applicationLoadBalancerId: string

    /**
     * The Application Load Balancer properties to be updated.
     * @type {ApplicationLoadBalancerProperties}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly applicationLoadBalancerProperties: ApplicationLoadBalancerProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersPost operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPostRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPost
     */
    readonly datacenterId: string

    /**
     * The Application Load Balancer to create.
     * @type {ApplicationLoadBalancer}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPost
     */
    readonly applicationLoadBalancer: ApplicationLoadBalancer

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersApplicationloadbalancersPut operation in ApplicationLoadBalancersApi.
 * @export
 * @interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPutRequest
 */
export interface ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Application Load Balancer.
     * @type {string}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly applicationLoadBalancerId: string

    /**
     * The modified Application Load Balancer.
     * @type {ApplicationLoadBalancerPut}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly applicationLoadBalancer: ApplicationLoadBalancerPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPut
     */
    readonly xContractNumber?: number
}

/**
 * ApplicationLoadBalancersApi - object-oriented interface
 * @export
 * @class ApplicationLoadBalancersApi
 * @extends {BaseAPI}
 */
export class ApplicationLoadBalancersApi extends BaseAPI {
    /**
     * Remove the specified Application Load Balancer from the data center..
     * @summary Delete Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersDelete(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersDeleteRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersDelete(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified Application Load Balancer within the data center.
     * @summary Retrieve Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFindByApplicationLoadBalancerIdRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFindByApplicationLoadBalancerId(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified Application Load Balancer Flow Log.
     * @summary Delete ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsDelete(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsDeleteRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsDelete(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified Application Load Balancer Flow Log.
     * @summary Retrieve ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsFindByFlowLogIdRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsFindByFlowLogId(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the Flow Logs for the specified Application Load Balancer.
     * @summary List ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsGet(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsGetRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsGet(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Application Load Balancer Flow Log.
     * @summary Partially modify ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsPatch(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPatchRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsPatch(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.flowLogId, requestParameters.applicationLoadBalancerFlowLogProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new Flow Log for the Application Load Balancer.
     * @summary Create ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsPost(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPostRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsPost(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.applicationLoadBalancerFlowLog, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified Application Load Balancer Flow Log.
     * @summary Modify ALB Flow Logs
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersFlowlogsPut(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersFlowlogsPutRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersFlowlogsPut(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.flowLogId, requestParameters.applicationLoadBalancerFlowLog, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified Application Load Balancer forwarding rule.
     * @summary Delete ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesDelete(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesDeleteRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesDelete(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified Application Load Balancer forwarding rule.
     * @summary Retrieve ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleIdRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesFindByForwardingRuleId(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the forwarding rules for the specified Application Load Balancer.
     * @summary List ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesGet(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesGetRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesGet(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Application Load Balancer forwarding rule.
     * @summary Partially modify ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesPatch(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPatchRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesPatch(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.applicationLoadBalancerForwardingRuleProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a forwarding rule for the Application Load Balancer.
     * @summary Create ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesPost(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPostRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesPost(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.applicationLoadBalancerForwardingRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified Application Load Balancer forwarding rule.
     * @summary Modify ALB forwarding rules
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersForwardingrulesPut(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersForwardingrulesPutRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersForwardingrulesPut(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.forwardingRuleId, requestParameters.applicationLoadBalancerForwardingRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Application Load Balancers within the data center.
     * @summary List Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersGet(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersGetRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified Application Load Balancer within the data center.
     * @summary Partially modify Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersPatch(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPatchRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersPatch(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.applicationLoadBalancerProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Application Load Balancer within the datacenter.
     * @summary Create Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersPost(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPostRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersPost(requestParameters.datacenterId, requestParameters.applicationLoadBalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified Application Load Balancer within the data center.
     * @summary Modify Application Load Balancers
     * @param {ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationLoadBalancersApi
     */
    public datacentersApplicationloadbalancersPut(requestParameters: ApplicationLoadBalancersApiDatacentersApplicationloadbalancersPutRequest, options?: any) {
        return ApplicationLoadBalancersApiFp(this.configuration).datacentersApplicationloadbalancersPut(requestParameters.datacenterId, requestParameters.applicationLoadBalancerId, requestParameters.applicationLoadBalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
