"use strict";
/**
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerApi = exports.ServerApiApiKeys = void 0;
var request_1 = __importDefault(require("request"));
var models_1 = require("../model/models");
var models_2 = require("../model/models");
var apis_1 = require("./apis");
var defaultBasePath = 'https://api.ionos.com/cloudapi/v5';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ServerApiApiKeys;
(function (ServerApiApiKeys) {
    ServerApiApiKeys[ServerApiApiKeys["Token Authentication"] = 0] = "Token Authentication";
})(ServerApiApiKeys = exports.ServerApiApiKeys || (exports.ServerApiApiKeys = {}));
var ServerApi = /** @class */ (function () {
    function ServerApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'Basic Authentication': new models_2.HttpBasicAuth(),
            'Token Authentication': new models_2.ApiKeyAuth('header', 'Authorization'),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ServerApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ServerApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ServerApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: false,
        configurable: true
    });
    ServerApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ServerApi.prototype.setApiKey = function (key, value) {
        this.authentications[ServerApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ServerApi.prototype, "username", {
        set: function (username) {
            this.authentications['Basic Authentication'].username = username;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ServerApi.prototype, "password", {
        set: function (password) {
            this.authentications['Basic Authentication'].password = password;
        },
        enumerable: false,
        configurable: true
    });
    ServerApi.prototype.addInterceptor = function (interceptor) {
        this.interceptors.push(interceptor);
    };
    /**
     * This will detach a CD-ROM from the server
     * @summary Detach a CD-ROM
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param cdromId The unique ID of the CD-ROM
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersCdromsDelete = function (datacenterId, serverId, cdromId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_1, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/cdroms/{cdromId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)))
                    .replace('{' + 'cdromId' + '}', encodeURIComponent(String(cdromId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersCdromsDelete.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersCdromsDelete.');
                }
                // verify required parameter 'cdromId' is not null or undefined
                if (cdromId === null || cdromId === undefined) {
                    throw new Error('Required parameter cdromId was null or undefined when calling datacentersServersCdromsDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_1 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_1(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a specific CD-ROM attached to the server
     * @summary Retrieve an attached CD-ROM
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param cdromId The unique ID of the CD-ROM
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersCdromsFindById = function (datacenterId, serverId, cdromId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_2, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/cdroms/{cdromId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)))
                    .replace('{' + 'cdromId' + '}', encodeURIComponent(String(cdromId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersCdromsFindById.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersCdromsFindById.');
                }
                // verify required parameter 'cdromId' is not null or undefined
                if (cdromId === null || cdromId === undefined) {
                    throw new Error('Required parameter cdromId was null or undefined when calling datacentersServersCdromsFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_2 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_2(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Image");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of CD-ROMs attached to the server.
     * @summary List attached CD-ROMs
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
     */
    ServerApi.prototype.datacentersServersCdromsGet = function (datacenterId, serverId, pretty, depth, xContractNumber, offset, limit, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_3, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/cdroms'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersCdromsGet.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersCdromsGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                if (offset !== undefined) {
                    localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
                }
                if (limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_3 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_3(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Cdroms");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can attach a CD-ROM to an existing server. You can attach up to 2 CD-ROMs to one server.
     * @summary Attach a CD-ROM
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param cdrom CD-ROM to be attached
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersCdromsPost = function (datacenterId, serverId, cdrom, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_4, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/cdroms'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersCdromsPost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersCdromsPost.');
                }
                // verify required parameter 'cdrom' is not null or undefined
                if (cdrom === null || cdrom === undefined) {
                    throw new Error('Required parameter cdrom was null or undefined when calling datacentersServersCdromsPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(cdrom, "Image")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_4 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_4(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Image");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will remove a server from your datacenter; however, it will not remove the storage volumes attached to the server. You will need to make a separate API call to perform that action
     * @summary Delete a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersDelete = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_5, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersDelete.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_5 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_5(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Returns information about a server such as its configuration, provisioning status, etc.
     * @summary Retrieve a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersFindById = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_6, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersFindById.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_6 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_6(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Server");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of servers within a datacenter
     * @summary List Servers
     * @param datacenterId The unique ID of the datacenter
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param upgradeNeeded It can be used to filter which servers can be upgraded which can not be upgraded.
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
     */
    ServerApi.prototype.datacentersServersGet = function (datacenterId, pretty, depth, upgradeNeeded, xContractNumber, offset, limit, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_7, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                if (upgradeNeeded !== undefined) {
                    localVarQueryParameters['upgradeNeeded'] = models_1.ObjectSerializer.serialize(upgradeNeeded, "boolean");
                }
                if (offset !== undefined) {
                    localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
                }
                if (limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_7 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_7(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Servers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use update attributes of a server
     * @summary Partially modify a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the server
     * @param server Modified properties of Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersPatch = function (datacenterId, serverId, server, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_8, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersPatch.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersPatch.');
                }
                // verify required parameter 'server' is not null or undefined
                if (server === null || server === undefined) {
                    throw new Error('Required parameter server was null or undefined when calling datacentersServersPatch.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PATCH',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(server, "ServerProperties")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_8 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_8(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Server");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Creates a server within an existing datacenter. You can configure the boot volume and connect the server to an existing LAN.
     * @summary Create a Server
     * @param datacenterId The unique ID of the datacenter
     * @param server Server to be created
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersPost = function (datacenterId, server, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_9, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersPost.');
                }
                // verify required parameter 'server' is not null or undefined
                if (server === null || server === undefined) {
                    throw new Error('Required parameter server was null or undefined when calling datacentersServersPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(server, "Server")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_9 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_9(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Server");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Allows to modify the attributes of a Server. From v5 onwards \'allowReboot\' attribute will no longer be available. For certain server property change it was earlier forced to be provided. Now this behaviour is implicit and backend will do this automatically e.g. in earlier versions, when CPU family changes, the \'allowReboot\' property was required to be set to true which will no longer be the case and the server will be rebooted automatically
     * @summary Modify a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the server
     * @param server Modified Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersPut = function (datacenterId, serverId, server, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_10, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersPut.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersPut.');
                }
                // verify required parameter 'server' is not null or undefined
                if (server === null || server === undefined) {
                    throw new Error('Required parameter server was null or undefined when calling datacentersServersPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(server, "Server")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_10 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_10(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Server");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will force a hard reboot of the server. Do not use this method if you want to gracefully reboot the machine. This is the equivalent of powering off the machine and turning it back on.
     * @summary Reboot a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersRebootPost = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_11, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/reboot'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersRebootPost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersRebootPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_11 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_11(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will start a server. If the server\'s public IP was deallocated then a new IP will be assigned
     * @summary Start a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersStartPost = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_12, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/start'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersStartPost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersStartPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_12 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_12(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will stop a server. The machine will be forcefully powered off, billing will cease, and the public IP, if one is allocated, will be deallocated. The operation is not supported for Cube servers.
     * @summary Stop a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersStopPost = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_13, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/stop'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersStopPost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersStopPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_13 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_13(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will upgrade the version of the server, if needed. To verify if there is an upgrade available for a server, call \'/datacenters/{datacenterId}/servers?upgradeNeeded=true\'
     * @summary Upgrade a Server
     * @param datacenterId The unique ID of the datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersUpgradePost = function (datacenterId, serverId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_14, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/upgrade'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersUpgradePost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersUpgradePost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_14 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_14(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will detach the volume from the server. This will not delete the volume from your datacenter. You will need to make a separate request to perform a deletion
     * @summary Detach a volume
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersVolumesDelete = function (datacenterId, serverId, volumeId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_15, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersVolumesDelete.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersVolumesDelete.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersServersVolumesDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_15 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_15(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will retrieve the properties of an attached volume.
     * @summary Retrieve an attached volume
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersVolumesFindById = function (datacenterId, serverId, volumeId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_16, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersVolumesFindById.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersVolumesFindById.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersServersVolumesFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_16 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_16(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of volumes attached to the server
     * @summary List Attached Volumes
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
     */
    ServerApi.prototype.datacentersServersVolumesGet = function (datacenterId, serverId, pretty, depth, xContractNumber, offset, limit, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_17, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/volumes'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersVolumesGet.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersVolumesGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                if (offset !== undefined) {
                    localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
                }
                if (limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_17 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_17(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "AttachedVolumes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will attach a pre-existing storage volume to the server. It is also possible to create and attach a volume in one step just by providing a new volume description as payload. Combine count of Nics and volumes attached to the server should not exceed size 24.
     * @summary Attach a volume
     * @param datacenterId The unique ID of the Datacenter
     * @param serverId The unique ID of the Server
     * @param volume Volume to be attached (created and attached)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    ServerApi.prototype.datacentersServersVolumesPost = function (datacenterId, serverId, volume, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_18, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/servers/{serverId}/volumes'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'serverId' + '}', encodeURIComponent(String(serverId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersServersVolumesPost.');
                }
                // verify required parameter 'serverId' is not null or undefined
                if (serverId === null || serverId === undefined) {
                    throw new Error('Required parameter serverId was null or undefined when calling datacentersServersVolumesPost.');
                }
                // verify required parameter 'volume' is not null or undefined
                if (volume === null || volume === undefined) {
                    throw new Error('Required parameter volume was null or undefined when calling datacentersServersVolumesPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(volume, "Volume")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_18 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_18(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case ServerApi.BAD_GATEWAY:
                                    case ServerApi.SERVICE_UNAVAILABLE:
                                    case ServerApi.GATEWAY_TIMEOUT:
                                        backoffTime = ServerApi.waitTime;
                                        break;
                                    case ServerApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = ServerApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    ServerApi.prototype.sleep = function (seconds) {
        var e = new Date().getTime() + (seconds * 1000);
        while (new Date().getTime() <= e) { }
    };
    ServerApi.prototype.waitForCompletion = function (requestId, timeout, initialWait, scaleup, maxRetries) {
        if (timeout === void 0) { timeout = 3600; }
        if (initialWait === void 0) { initialWait = 5; }
        if (scaleup === void 0) { scaleup = 10; }
        if (maxRetries === void 0) { maxRetries = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var waitPeriod, nextIncrease, requestCall, breakLoop, currentTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /**
                         Poll resource request status until resource is provisioned.
                
                         :param      requestId: Request id of the action.
                         :type       requestId: ``str``
                
                         :param      timeout: Maximum waiting time in seconds. None means infinite waiting time.
                         :type       timeout: ``int``
                
                         :param      initialWait: Initial polling interval in seconds.
                         :type       initialWait: ``int``
                
                         :param      scaleup: Double polling interval every scaleup steps, which will be doubled.
                         :type       scaleup: ``int``
                
                         */
                        if (!requestId) {
                            throw new Error("Request ID is missing.");
                        }
                        waitPeriod = initialWait;
                        nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                        timeout = Date.now() / 1000 + timeout;
                        requestCall = (new apis_1.RequestApi(this.username, this.password)).requestsStatusGet(requestId);
                        breakLoop = false;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [4 /*yield*/, requestCall.then(function (request) {
                                var _a, _b;
                                if (((_a = request.body.metadata) === null || _a === void 0 ? void 0 : _a.status) == models_1.RequestStatusMetadata.StatusEnum.Done) {
                                    breakLoop = true;
                                }
                                else if (((_b = request.body.metadata) === null || _b === void 0 ? void 0 : _b.status) == models_1.RequestStatusMetadata.StatusEnum.Failed) {
                                    throw new Error("Request " + requestId + " failed to complete: " + request['metadata']['message']);
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (breakLoop) {
                            return [3 /*break*/, 3];
                        }
                        currentTime = Date.now() / 1000;
                        if (timeout && currentTime > timeout) {
                            throw new Error("Timed out waiting for request " + requestId + ".");
                        }
                        if (currentTime > nextIncrease) {
                            waitPeriod *= 2;
                            nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                            scaleup *= 2;
                        }
                        this.sleep(waitPeriod);
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ServerApi.BAD_GATEWAY = 502;
    ServerApi.SERVICE_UNAVAILABLE = 503;
    ServerApi.GATEWAY_TIMEOUT = 504;
    ServerApi.TOO_MANY_REQUESTS = 429;
    ServerApi.maxRetries = 3;
    ServerApi.waitTime = 10;
    ServerApi.maxWaitTime = 2000;
    return ServerApi;
}());
exports.ServerApi = ServerApi;
