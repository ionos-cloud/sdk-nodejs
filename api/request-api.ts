/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { Request } from '../model';
// @ts-ignore
import { RequestStatus } from '../model';
// @ts-ignore
import { Requests } from '../model';
/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsFindById: async (requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestsFindById.');
            }
            const localVarPath = `/requests/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
         * @param {number} [limit] the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet: async (pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((filterStatus === undefined) && (configuration !== undefined)) {
                filterStatus = configuration.getDefaultParamValue('filterStatus');
            }
            if (filterStatus !== undefined) {
                localVarQueryParameter['filter.status'] = filterStatus;
            }

            if ((filterCreatedAfter === undefined) && (configuration !== undefined)) {
                filterCreatedAfter = configuration.getDefaultParamValue('filterCreatedAfter');
            }
            if (filterCreatedAfter !== undefined) {
                localVarQueryParameter['filter.createdAfter'] = filterCreatedAfter;
            }

            if ((filterCreatedBefore === undefined) && (configuration !== undefined)) {
                filterCreatedBefore = configuration.getDefaultParamValue('filterCreatedBefore');
            }
            if (filterCreatedBefore !== undefined) {
                localVarQueryParameter['filter.createdBefore'] = filterCreatedBefore;
            }

            if ((filterCreatedDate === undefined) && (configuration !== undefined)) {
                filterCreatedDate = configuration.getDefaultParamValue('filterCreatedDate');
            }
            if (filterCreatedDate !== undefined) {
                localVarQueryParameter['filter.createdDate'] = filterCreatedDate;
            }

            if ((filterCreatedBy === undefined) && (configuration !== undefined)) {
                filterCreatedBy = configuration.getDefaultParamValue('filterCreatedBy');
            }
            if (filterCreatedBy !== undefined) {
                localVarQueryParameter['filter.createdBy'] = filterCreatedBy;
            }

            if ((filterEtag === undefined) && (configuration !== undefined)) {
                filterEtag = configuration.getDefaultParamValue('filterEtag');
            }
            if (filterEtag !== undefined) {
                localVarQueryParameter['filter.etag'] = filterEtag;
            }

            if ((filterRequestStatus === undefined) && (configuration !== undefined)) {
                filterRequestStatus = configuration.getDefaultParamValue('filterRequestStatus');
            }
            if (filterRequestStatus !== undefined) {
                localVarQueryParameter['filter.requestStatus'] = filterRequestStatus;
            }

            if ((filterMethod === undefined) && (configuration !== undefined)) {
                filterMethod = configuration.getDefaultParamValue('filterMethod');
            }
            if (filterMethod !== undefined) {
                localVarQueryParameter['filter.method'] = filterMethod;
            }

            if ((filterHeaders === undefined) && (configuration !== undefined)) {
                filterHeaders = configuration.getDefaultParamValue('filterHeaders');
            }
            if (filterHeaders !== undefined) {
                localVarQueryParameter['filter.headers'] = filterHeaders;
            }

            if ((filterBody === undefined) && (configuration !== undefined)) {
                filterBody = configuration.getDefaultParamValue('filterBody');
            }
            if (filterBody !== undefined) {
                localVarQueryParameter['filter.body'] = filterBody;
            }

            if ((filterUrl === undefined) && (configuration !== undefined)) {
                filterUrl = configuration.getDefaultParamValue('filterUrl');
            }
            if (filterUrl !== undefined) {
                localVarQueryParameter['filter.url'] = filterUrl;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsStatusGet: async (requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestsStatusGet.');
            }
            const localVarPath = `/requests/{requestId}/status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsFindById(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const axiosArgs = await RequestApiAxiosParamCreator(configuration).requestsFindById(requestId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
         * @param {number} [limit] the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsGet(pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Requests>> {
            const axiosArgs = await RequestApiAxiosParamCreator(configuration).requestsGet(pretty, depth, xContractNumber, filterStatus, filterCreatedAfter, filterCreatedBefore, filterCreatedDate, filterCreatedBy, filterEtag, filterRequestStatus, filterMethod, filterHeaders, filterBody, filterUrl, offset, limit, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsStatusGet(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestStatus>> {
            const axiosArgs = await RequestApiAxiosParamCreator(configuration).requestsStatusGet(requestId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsFindById(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Request> {
            return RequestApiFp(configuration).requestsFindById(requestId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
         * @param {number} [limit] the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet(pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options?: any): AxiosPromise<Requests> {
            return RequestApiFp(configuration).requestsGet(pretty, depth, xContractNumber, filterStatus, filterCreatedAfter, filterCreatedBefore, filterCreatedDate, filterCreatedBy, filterEtag, filterRequestStatus, filterMethod, filterHeaders, filterBody, filterUrl, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether response is pretty-printed (with indentation and new lines)
         * @param {number} [depth] Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users having more than 1 contract need to provide contract number, against which all API requests should be executed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsStatusGet(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<RequestStatus> {
            return RequestApiFp(configuration).requestsStatusGet(requestId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestsFindById operation in RequestApi.
 * @export
 * @interface RequestApiRequestsFindByIdRequest
 */
export interface RequestApiRequestsFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestApiRequestsFindById
     */
    readonly requestId: string

    /**
     * Controls whether response is pretty-printed (with indentation and new lines)
     * @type {boolean}
     * @memberof RequestApiRequestsFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestApiRequestsFindById
     */
    readonly depth?: number

    /**
     * Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @type {number}
     * @memberof RequestApiRequestsFindById
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for requestsGet operation in RequestApi.
 * @export
 * @interface RequestApiRequestsGetRequest
 */
export interface RequestApiRequestsGetRequest {
    /**
     * Controls whether response is pretty-printed (with indentation and new lines)
     * @type {boolean}
     * @memberof RequestApiRequestsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestApiRequestsGet
     */
    readonly depth?: number

    /**
     * Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @type {number}
     * @memberof RequestApiRequestsGet
     */
    readonly xContractNumber?: number

    /**
     * Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterStatus?: string

    /**
     * Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterCreatedAfter?: string

    /**
     * Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterCreatedBefore?: string

    /**
     * Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterCreatedDate?: string

    /**
     * Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterCreatedBy?: string

    /**
     * Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterEtag?: string

    /**
     * Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterRequestStatus?: string

    /**
     * Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterMethod?: string

    /**
     * Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterHeaders?: string

    /**
     * Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterBody?: string

    /**
     * Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestApiRequestsGet
     */
    readonly filterUrl?: string

    /**
     * the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
     * @type {number}
     * @memberof RequestApiRequestsGet
     */
    readonly offset?: number

    /**
     * the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
     * @type {number}
     * @memberof RequestApiRequestsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for requestsStatusGet operation in RequestApi.
 * @export
 * @interface RequestApiRequestsStatusGetRequest
 */
export interface RequestApiRequestsStatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestApiRequestsStatusGet
     */
    readonly requestId: string

    /**
     * Controls whether response is pretty-printed (with indentation and new lines)
     * @type {boolean}
     * @memberof RequestApiRequestsStatusGet
     */
    readonly pretty?: boolean

    /**
     * Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestApiRequestsStatusGet
     */
    readonly depth?: number

    /**
     * Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @type {number}
     * @memberof RequestApiRequestsStatusGet
     */
    readonly xContractNumber?: number
}

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * Retrieves the attributes of a given request.
     * @summary Retrieve a Request
     * @param {RequestApiRequestsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestsFindById(requestParameters: RequestApiRequestsFindByIdRequest, options?: any) {
        return RequestApiFp(this.configuration).requestsFindById(requestParameters.requestId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of API requests.
     * @summary List Requests
     * @param {RequestApiRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestsGet(requestParameters: RequestApiRequestsGetRequest = {}, options?: any) {
        return RequestApiFp(this.configuration).requestsGet(requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.filterStatus, requestParameters.filterCreatedAfter, requestParameters.filterCreatedBefore, requestParameters.filterCreatedDate, requestParameters.filterCreatedBy, requestParameters.filterEtag, requestParameters.filterRequestStatus, requestParameters.filterMethod, requestParameters.filterHeaders, requestParameters.filterBody, requestParameters.filterUrl, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the status of a given request.
     * @summary Retrieve Request Status
     * @param {RequestApiRequestsStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestsStatusGet(requestParameters: RequestApiRequestsStatusGetRequest, options?: any) {
        return RequestApiFp(this.configuration).requestsStatusGet(requestParameters.requestId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
