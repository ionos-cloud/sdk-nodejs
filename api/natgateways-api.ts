/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { FlowLog } from '../model';
// @ts-ignore
import { FlowLogProperties } from '../model';
// @ts-ignore
import { FlowLogPut } from '../model';
// @ts-ignore
import { FlowLogs } from '../model';
// @ts-ignore
import { NatGateway } from '../model';
// @ts-ignore
import { NatGatewayProperties } from '../model';
// @ts-ignore
import { NatGatewayPut } from '../model';
// @ts-ignore
import { NatGatewayRule } from '../model';
// @ts-ignore
import { NatGatewayRuleProperties } from '../model';
// @ts-ignore
import { NatGatewayRulePut } from '../model';
// @ts-ignore
import { NatGatewayRules } from '../model';
// @ts-ignore
import { NatGateways } from '../model';
/**
 * NATGatewaysApi - axios parameter creator
 * @export
 */
export const NATGatewaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysDelete: async (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysDelete.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFindByNatGatewayId: async (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFindByNatGatewayId.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFindByNatGatewayId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsDelete: async (datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsFindByFlowLogId: async (datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsGet: async (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsGet.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }

    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPatch: async (datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
            }
            if (natGatewayFlowLogProperties === null || natGatewayFlowLogProperties === undefined) {
                throw new RequiredError('natGatewayFlowLogProperties','Required parameter natGatewayFlowLogProperties was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayFlowLogProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayFlowLogProperties !== undefined ? natGatewayFlowLogProperties : {})
                : (natGatewayFlowLogProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPost: async (datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
            }
            if (natGatewayFlowLog === null || natGatewayFlowLog === undefined) {
                throw new RequiredError('natGatewayFlowLog','Required parameter natGatewayFlowLog was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayFlowLog !== undefined ? natGatewayFlowLog : {})
                : (natGatewayFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPut: async (datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
            }
            if (flowLogId === null || flowLogId === undefined) {
                throw new RequiredError('flowLogId','Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
            }
            if (natGatewayFlowLog === null || natGatewayFlowLog === undefined) {
                throw new RequiredError('natGatewayFlowLog','Required parameter natGatewayFlowLog was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"flowLogId"}}`, encodeURIComponent(String(flowLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayFlowLog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayFlowLog !== undefined ? natGatewayFlowLog : {})
                : (natGatewayFlowLog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysGet: async (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPatch: async (datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPatch.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysPatch.');
            }
            if (natGatewayProperties === null || natGatewayProperties === undefined) {
                throw new RequiredError('natGatewayProperties','Required parameter natGatewayProperties was null or undefined when calling datacentersNatgatewaysPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayProperties !== undefined ? natGatewayProperties : {})
                : (natGatewayProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPost: async (datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPost.');
            }
            if (natGateway === null || natGateway === undefined) {
                throw new RequiredError('natGateway','Required parameter natGateway was null or undefined when calling datacentersNatgatewaysPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGateway !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGateway !== undefined ? natGateway : {})
                : (natGateway || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPut: async (datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPut.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysPut.');
            }
            if (natGateway === null || natGateway === undefined) {
                throw new RequiredError('natGateway','Required parameter natGateway was null or undefined when calling datacentersNatgatewaysPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGateway !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGateway !== undefined ? natGateway : {})
                : (natGateway || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesDelete: async (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
            }
            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                throw new RequiredError('natGatewayRuleId','Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"natGatewayRuleId"}}`, encodeURIComponent(String(natGatewayRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesFindByNatGatewayRuleId: async (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
            }
            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                throw new RequiredError('natGatewayRuleId','Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"natGatewayRuleId"}}`, encodeURIComponent(String(natGatewayRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesGet: async (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesGet.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPatch: async (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
            }
            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                throw new RequiredError('natGatewayRuleId','Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
            }
            if (natGatewayRuleProperties === null || natGatewayRuleProperties === undefined) {
                throw new RequiredError('natGatewayRuleProperties','Required parameter natGatewayRuleProperties was null or undefined when calling datacentersNatgatewaysRulesPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"natGatewayRuleId"}}`, encodeURIComponent(String(natGatewayRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayRuleProperties !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayRuleProperties !== undefined ? natGatewayRuleProperties : {})
                : (natGatewayRuleProperties || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPost: async (datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPost.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPost.');
            }
            if (natGatewayRule === null || natGatewayRule === undefined) {
                throw new RequiredError('natGatewayRule','Required parameter natGatewayRule was null or undefined when calling datacentersNatgatewaysRulesPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayRule !== undefined ? natGatewayRule : {})
                : (natGatewayRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPut: async (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPut.');
            }
            if (natGatewayId === null || natGatewayId === undefined) {
                throw new RequiredError('natGatewayId','Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPut.');
            }
            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                throw new RequiredError('natGatewayRuleId','Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesPut.');
            }
            if (natGatewayRule === null || natGatewayRule === undefined) {
                throw new RequiredError('natGatewayRule','Required parameter natGatewayRule was null or undefined when calling datacentersNatgatewaysRulesPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"natGatewayId"}}`, encodeURIComponent(String(natGatewayId)))
                .replace(`{${"natGatewayRuleId"}}`, encodeURIComponent(String(natGatewayRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof natGatewayRule !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(natGatewayRule !== undefined ? natGatewayRule : {})
                : (natGatewayRule || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NATGatewaysApi - functional programming interface
 * @export
 */
export const NATGatewaysApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysDelete(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysDelete(datacenterId, natGatewayId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFindByNatGatewayId(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFindByNatGatewayId(datacenterId, natGatewayId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsDelete(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsDelete(datacenterId, natGatewayId, flowLogId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId, natGatewayId, flowLogId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsGet(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsPatch(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPatch(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsPost(datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPost(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysFlowlogsPut(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPut(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateways>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysGet(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysPatch(datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPatch(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysPost(datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPost(datacenterId, natGateway, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysPut(datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPut(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesDelete(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesDelete(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRules>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesGet(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesPatch(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPatch(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesPost(datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPost(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersNatgatewaysRulesPut(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>> {
            const axiosArgs = await NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPut(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * NATGatewaysApi - factory interface
 * @export
 */
export const NATGatewaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysDelete(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysDelete(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFindByNatGatewayId(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFindByNatGatewayId(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsDelete(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<void> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsDelete(datacenterId, natGatewayId, flowLogId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId, natGatewayId, flowLogId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FlowLogs> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsGet(datacenterId, natGatewayId, pretty, depth, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPatch(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPatch(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPost(datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPost(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPut(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPut(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateways> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysGet(datacenterId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPatch(datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysPatch(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPost(datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysPost(datacenterId, natGateway, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPut(datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysPut(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesDelete(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesDelete(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRules> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesGet(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPatch(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPatch(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPost(datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPost(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPut(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule> {
            return NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPut(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersNatgatewaysDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly natGatewayId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysFindByNatGatewayId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly natGatewayId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsFindByFlowLogId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly flowLogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly natGatewayId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly depth?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly flowLogId: string

    /**
     * The properties of the Flow Log to be updated.
     * @type {FlowLogProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly natGatewayFlowLogProperties: FlowLogProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly natGatewayId: string

    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly natGatewayFlowLog: FlowLog

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersNatgatewaysFlowlogsPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly flowLogId: string

    /**
     * The modified NAT Gateway Flow Log.
     * @type {FlowLogPut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly natGatewayFlowLog: FlowLogPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersNatgatewaysGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly datacenterId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNatgatewaysPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly natGatewayId: string

    /**
     * The properties of the NAT Gateway to be updated.
     * @type {NatGatewayProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly natGatewayProperties: NatGatewayProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly datacenterId: string

    /**
     * The NAT Gateway to create.
     * @type {NatGateway}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly natGateway: NatGateway

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly natGatewayId: string

    /**
     * The modified NAT Gateway.
     * @type {NatGatewayPut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly natGateway: NatGatewayPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysRulesDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly natGatewayRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysRulesFindByNatGatewayRuleId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly natGatewayRuleId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysRulesGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly natGatewayId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly xContractNumber?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersNatgatewaysRulesPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayRuleId: string

    /**
     * The properties of the NAT Gateway rule to be updated.
     * @type {NatGatewayRuleProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayRuleProperties: NatGatewayRuleProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysRulesPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly natGatewayId: string

    /**
     * The NAT Gateway rule to create.
     * @type {NatGatewayRule}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly natGatewayRule: NatGatewayRule

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersNatgatewaysRulesPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayId: string

    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayRuleId: string

    /**
     * The modified NAT Gateway rule.
     * @type {NatGatewayRulePut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayRule: NatGatewayRulePut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly xContractNumber?: number
}

/**
 * NATGatewaysApi - object-oriented interface
 * @export
 * @class NATGatewaysApi
 * @extends {BaseAPI}
 */
export class NATGatewaysApi extends BaseAPI {
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysDeleteRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFindByNatGatewayId(requestParameters: NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFindByNatGatewayId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsFindByFlowLogId(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsGet(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.natGatewayFlowLogProperties, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPost(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayFlowLog, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysFlowlogsPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.natGatewayFlowLog, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysGetRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysPatchRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {NATGatewaysApiDatacentersNatgatewaysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysPostRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPost(requestParameters.datacenterId, requestParameters.natGateway, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysPutRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGateway, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesFindByNatGatewayRuleId(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesGetRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesGet(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.natGatewayRuleProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPostRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPost(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    public datacentersNatgatewaysRulesPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPutRequest, options?: any) {
        return NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.natGatewayRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
