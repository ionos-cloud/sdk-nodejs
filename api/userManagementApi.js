"use strict";
/**
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManagementApi = exports.UserManagementApiApiKeys = void 0;
var request_1 = __importDefault(require("request"));
var models_1 = require("../model/models");
var models_2 = require("../model/models");
var apis_1 = require("./apis");
var defaultBasePath = 'https://api.ionos.com/cloudapi/v5';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var UserManagementApiApiKeys;
(function (UserManagementApiApiKeys) {
    UserManagementApiApiKeys[UserManagementApiApiKeys["Token Authentication"] = 0] = "Token Authentication";
})(UserManagementApiApiKeys = exports.UserManagementApiApiKeys || (exports.UserManagementApiApiKeys = {}));
var UserManagementApi = /** @class */ (function () {
    function UserManagementApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'Basic Authentication': new models_2.HttpBasicAuth(),
            'Token Authentication': new models_2.ApiKeyAuth('header', 'Authorization'),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(UserManagementApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserManagementApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserManagementApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: false,
        configurable: true
    });
    UserManagementApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    UserManagementApi.prototype.setApiKey = function (key, value) {
        this.authentications[UserManagementApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(UserManagementApi.prototype, "username", {
        set: function (username) {
            this.authentications['Basic Authentication'].username = username;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserManagementApi.prototype, "password", {
        set: function (password) {
            this.authentications['Basic Authentication'].password = password;
        },
        enumerable: false,
        configurable: true
    });
    UserManagementApi.prototype.addInterceptor = function (interceptor) {
        this.interceptors.push(interceptor);
    };
    /**
     * Delete a group
     * @summary Delete a Group
     * @param groupId The unique ID of the group
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsDelete = function (groupId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_1, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_1 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_1(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a group by using the group ID. This value can be found in the response body when a group is created or when you GET a list of groups.
     * @summary Retrieve a Group
     * @param groupId The unique ID of the group
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsFindById = function (groupId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_2, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_2 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_2(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Group");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a complete list of all groups that you have access to
     * @summary List All Groups.
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsGet = function (pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_3, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups';
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_3 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_3(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Groups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use this POST method to create a group
     * @summary Create a Group
     * @param group Group to be created
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsPost = function (group, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_4, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups';
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'group' is not null or undefined
                if (group === null || group === undefined) {
                    throw new Error('Required parameter group was null or undefined when calling umGroupsPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(group, "Group")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_4 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_4(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Group");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use this method to update properties of the group.
     * @summary Modify a group
     * @param groupId The unique ID of the group
     * @param group Modified properties of the Group
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsPut = function (groupId, group, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_5, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsPut.');
                }
                // verify required parameter 'group' is not null or undefined
                if (group === null || group === undefined) {
                    throw new Error('Required parameter group was null or undefined when calling umGroupsPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(group, "Group")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_5 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_5(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Group");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     *
     * @summary Retrieve resources assigned to a group
     * @param groupId The unique ID of the group
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsResourcesGet = function (groupId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_6, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/resources'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsResourcesGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_6 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_6(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ResourceGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will remove a resource from a group
     * @summary Remove a resource from a group
     * @param groupId
     * @param resourceId
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsSharesDelete = function (groupId, resourceId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_7, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/shares/{resourceId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                    .replace('{' + 'resourceId' + '}', encodeURIComponent(String(resourceId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsSharesDelete.');
                }
                // verify required parameter 'resourceId' is not null or undefined
                if (resourceId === null || resourceId === undefined) {
                    throw new Error('Required parameter resourceId was null or undefined when calling umGroupsSharesDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_7 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_7(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will retrieve the properties of a group share.
     * @summary Retrieve a group share
     * @param groupId
     * @param resourceId
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsSharesFindByResourceId = function (groupId, resourceId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_8, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/shares/{resourceId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                    .replace('{' + 'resourceId' + '}', encodeURIComponent(String(resourceId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsSharesFindByResourceId.');
                }
                // verify required parameter 'resourceId' is not null or undefined
                if (resourceId === null || resourceId === undefined) {
                    throw new Error('Required parameter resourceId was null or undefined when calling umGroupsSharesFindByResourceId.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_8 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_8(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "GroupShare");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of all resources along with their permissions of the group
     * @summary List Group Shares
     * @param groupId
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsSharesGet = function (groupId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_9, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/shares'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsSharesGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_9 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_9(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "GroupShares");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will add a resource to the group.
     * @summary Add a resource to a group
     * @param groupId
     * @param resourceId
     * @param resource Resource to be added
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsSharesPost = function (groupId, resourceId, resource, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_10, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/shares/{resourceId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                    .replace('{' + 'resourceId' + '}', encodeURIComponent(String(resourceId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsSharesPost.');
                }
                // verify required parameter 'resourceId' is not null or undefined
                if (resourceId === null || resourceId === undefined) {
                    throw new Error('Required parameter resourceId was null or undefined when calling umGroupsSharesPost.');
                }
                // verify required parameter 'resource' is not null or undefined
                if (resource === null || resource === undefined) {
                    throw new Error('Required parameter resource was null or undefined when calling umGroupsSharesPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(resource, "GroupShare")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_10 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_10(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "GroupShare");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use update resource permissions of a group. If empty body will be provided, no updates will happen, instead you will be returned the current permissions of resource in a group. In this case response code will be 200
     * @summary Modify resource permissions of a group
     * @param groupId
     * @param resourceId
     * @param resource Modified Resource
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsSharesPut = function (groupId, resourceId, resource, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_11, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/shares/{resourceId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                    .replace('{' + 'resourceId' + '}', encodeURIComponent(String(resourceId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsSharesPut.');
                }
                // verify required parameter 'resourceId' is not null or undefined
                if (resourceId === null || resourceId === undefined) {
                    throw new Error('Required parameter resourceId was null or undefined when calling umGroupsSharesPut.');
                }
                // verify required parameter 'resource' is not null or undefined
                if (resource === null || resource === undefined) {
                    throw new Error('Required parameter resource was null or undefined when calling umGroupsSharesPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(resource, "GroupShare")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_11 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_11(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "GroupShare");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will remove a user from a group
     * @summary Remove a user from a group
     * @param groupId
     * @param userId
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsUsersDelete = function (groupId, userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_12, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/users/{userId}'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsUsersDelete.');
                }
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umGroupsUsersDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_12 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_12(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of users who are members of the group
     * @summary List Group Members
     * @param groupId
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsUsersGet = function (groupId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_13, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/users'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsUsersGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_13 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_13(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "GroupMembers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will attach a pre-existing user to a group.
     * @summary Add a user to a group
     * @param groupId
     * @param user User to be added
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umGroupsUsersPost = function (groupId, user, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_14, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/groups/{groupId}/users'
                    .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'groupId' is not null or undefined
                if (groupId === null || groupId === undefined) {
                    throw new Error('Required parameter groupId was null or undefined when calling umGroupsUsersPost.');
                }
                // verify required parameter 'user' is not null or undefined
                if (user === null || user === undefined) {
                    throw new Error('Required parameter user was null or undefined when calling umGroupsUsersPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(user, "User")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_14 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_14(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "User");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a list of resources by using the type. Allowed values are { datacenter, snapshot, image, ipblock, pcc, backupunit, k8s }. This value of resource type also be found in the response body when you GET a list of all resources.
     * @summary Retrieve a list of Resources by type.
     * @param resourceType The resource Type
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umResourcesFindByType = function (resourceType, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_15, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/resources/{resourceType}'
                    .replace('{' + 'resourceType' + '}', encodeURIComponent(String(resourceType)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'resourceType' is not null or undefined
                if (resourceType === null || resourceType === undefined) {
                    throw new Error('Required parameter resourceType was null or undefined when calling umResourcesFindByType.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_15 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_15(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Resources");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a resource by using the type and its uuid. Allowed values for types are { datacenter, snapshot, image, ipblock, pcc, backupunit, k8s }. The value of resource type can also be found in the response body when you GET a list of all resources.
     * @summary Retrieve a Resource by type.
     * @param resourceType The resource Type
     * @param resourceId The resource Uuid
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umResourcesFindByTypeAndId = function (resourceType, resourceId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_16, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/resources/{resourceType}/{resourceId}'
                    .replace('{' + 'resourceType' + '}', encodeURIComponent(String(resourceType)))
                    .replace('{' + 'resourceId' + '}', encodeURIComponent(String(resourceId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'resourceType' is not null or undefined
                if (resourceType === null || resourceType === undefined) {
                    throw new Error('Required parameter resourceType was null or undefined when calling umResourcesFindByTypeAndId.');
                }
                // verify required parameter 'resourceId' is not null or undefined
                if (resourceId === null || resourceId === undefined) {
                    throw new Error('Required parameter resourceId was null or undefined when calling umResourcesFindByTypeAndId.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_16 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_16(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Resource");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a complete list of all resources that you have access to
     * @summary List All Resources.
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umResourcesGet = function (pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_17, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/resources';
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_17 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_17(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Resources");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Delete a user
     * @summary Delete a User
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersDelete = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_18, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_18 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_18(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve user details by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     * @summary Retrieve a User
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersFindById = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_19, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_19 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_19(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "User");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve a complete list of users under your account
     * @summary List all Users
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersGet = function (pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_20, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users';
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_20 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_20(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Users");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve group resources of user by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     * @summary Retrieve a User\'s group resources
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersGroupsGet = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_21, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/groups'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersGroupsGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_21 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_21(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ResourceGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve resources owned by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     * @summary Retrieve a User\'s own resources
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersOwnsGet = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_22, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/owns'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersOwnsGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_22 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_22(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ResourcesUsers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use this POST method to create a user
     * @summary Create a user
     * @param user User to be created
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersPost = function (user, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_23, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users';
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'user' is not null or undefined
                if (user === null || user === undefined) {
                    throw new Error('Required parameter user was null or undefined when calling umUsersPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(user, "User")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_23 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_23(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "User");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use update attributes of a User
     * @summary Modify a user
     * @param userId
     * @param user Modified user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersPut = function (userId, user, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_24, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersPut.');
                }
                // verify required parameter 'user' is not null or undefined
                if (user === null || user === undefined) {
                    throw new Error('Required parameter user was null or undefined when calling umUsersPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(user, "User")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_24 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_24(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "User");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Delete a S3 key
     * @summary Delete a S3 key
     * @param userId The unique ID of the user
     * @param keyId The unique access key ID of the S3 key
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3keysDelete = function (userId, keyId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_25, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3keys/{keyId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)))
                    .replace('{' + 'keyId' + '}', encodeURIComponent(String(keyId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3keysDelete.');
                }
                // verify required parameter 'keyId' is not null or undefined
                if (keyId === null || keyId === undefined) {
                    throw new Error('Required parameter keyId was null or undefined when calling umUsersS3keysDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_25 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_25(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve S3 key belonging to the given User. This user Id can be found in the response body when a user is created or when you GET a list of users. The key Id can be found in the response body when a S3 key is created or when you GET a list of all S3 keys of a user
     * @summary Retrieve given S3 key belonging to the given User
     * @param userId The unique ID of the user
     * @param keyId The unique access key ID of the S3 key
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3keysFindByKeyId = function (userId, keyId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_26, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3keys/{keyId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)))
                    .replace('{' + 'keyId' + '}', encodeURIComponent(String(keyId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3keysFindByKeyId.');
                }
                // verify required parameter 'keyId' is not null or undefined
                if (keyId === null || keyId === undefined) {
                    throw new Error('Required parameter keyId was null or undefined when calling umUsersS3keysFindByKeyId.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_26 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_26(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "S3Key");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve S3 keys owned by a user by using the users ID. This user Id can be found in the response body when a user is created or when you GET a list of users.
     * @summary Retrieve a User\'s S3 keys
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3keysGet = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_27, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3keys'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3keysGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_27 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_27(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "S3Keys");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Creates a S3 key for the given user. This user Id can be found in the response body when a user is created or when you GET a list of users. Maximum of 5 keys can be generated for a given user
     * @summary Create a S3 key for the given user
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3keysPost = function (userId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_28, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3keys'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3keysPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_28 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_28(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "S3Key");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can enable or disable a given S3 key
     * @summary Modify a S3 key having the given key id
     * @param userId
     * @param keyId The unique access key ID of the S3 key
     * @param s3Key Modified s3 key
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3keysPut = function (userId, keyId, s3Key, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_29, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3keys/{keyId}'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)))
                    .replace('{' + 'keyId' + '}', encodeURIComponent(String(keyId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3keysPut.');
                }
                // verify required parameter 'keyId' is not null or undefined
                if (keyId === null || keyId === undefined) {
                    throw new Error('Required parameter keyId was null or undefined when calling umUsersS3keysPut.');
                }
                // verify required parameter 's3Key' is not null or undefined
                if (s3Key === null || s3Key === undefined) {
                    throw new Error('Required parameter s3Key was null or undefined when calling umUsersS3keysPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(s3Key, "S3Key")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_29 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_29(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "S3Key");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can retrieve S3 object storage single signon URL for the given user. This user Id can be found in the response body when a user is created or when you GET a list of users.
     * @summary Retrieve S3 object storage single signon URL for the given user
     * @param userId The unique ID of the user
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    UserManagementApi.prototype.umUsersS3ssourlGet = function (userId, pretty, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_30, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/um/users/{userId}/s3ssourl'
                    .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'userId' is not null or undefined
                if (userId === null || userId === undefined) {
                    throw new Error('Required parameter userId was null or undefined when calling umUsersS3ssourlGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_30 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_30(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "S3ObjectStorageSSO");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case UserManagementApi.BAD_GATEWAY:
                                    case UserManagementApi.SERVICE_UNAVAILABLE:
                                    case UserManagementApi.GATEWAY_TIMEOUT:
                                        backoffTime = UserManagementApi.waitTime;
                                        break;
                                    case UserManagementApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = UserManagementApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    UserManagementApi.prototype.sleep = function (seconds) {
        var e = new Date().getTime() + (seconds * 1000);
        while (new Date().getTime() <= e) { }
    };
    UserManagementApi.prototype.waitForCompletion = function (requestId, timeout, initialWait, scaleup, maxRetries) {
        if (timeout === void 0) { timeout = 3600; }
        if (initialWait === void 0) { initialWait = 5; }
        if (scaleup === void 0) { scaleup = 10; }
        if (maxRetries === void 0) { maxRetries = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var waitPeriod, nextIncrease, requestCall, breakLoop, currentTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /**
                         Poll resource request status until resource is provisioned.
                
                         :param      requestId: Request id of the action.
                         :type       requestId: ``str``
                
                         :param      timeout: Maximum waiting time in seconds. None means infinite waiting time.
                         :type       timeout: ``int``
                
                         :param      initialWait: Initial polling interval in seconds.
                         :type       initialWait: ``int``
                
                         :param      scaleup: Double polling interval every scaleup steps, which will be doubled.
                         :type       scaleup: ``int``
                
                         */
                        if (!requestId) {
                            throw new Error("Request ID is missing.");
                        }
                        waitPeriod = initialWait;
                        nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                        timeout = Date.now() / 1000 + timeout;
                        requestCall = (new apis_1.RequestApi(this.username, this.password)).requestsStatusGet(requestId);
                        breakLoop = false;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [4 /*yield*/, requestCall.then(function (request) {
                                var _a, _b;
                                if (((_a = request.body.metadata) === null || _a === void 0 ? void 0 : _a.status) == models_1.RequestStatusMetadata.StatusEnum.Done) {
                                    breakLoop = true;
                                }
                                else if (((_b = request.body.metadata) === null || _b === void 0 ? void 0 : _b.status) == models_1.RequestStatusMetadata.StatusEnum.Failed) {
                                    throw new Error("Request " + requestId + " failed to complete: " + request['metadata']['message']);
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (breakLoop) {
                            return [3 /*break*/, 3];
                        }
                        currentTime = Date.now() / 1000;
                        if (timeout && currentTime > timeout) {
                            throw new Error("Timed out waiting for request " + requestId + ".");
                        }
                        if (currentTime > nextIncrease) {
                            waitPeriod *= 2;
                            nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                            scaleup *= 2;
                        }
                        this.sleep(waitPeriod);
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    UserManagementApi.BAD_GATEWAY = 502;
    UserManagementApi.SERVICE_UNAVAILABLE = 503;
    UserManagementApi.GATEWAY_TIMEOUT = 504;
    UserManagementApi.TOO_MANY_REQUESTS = 429;
    UserManagementApi.maxRetries = 3;
    UserManagementApi.waitTime = 10;
    UserManagementApi.maxWaitTime = 2000;
    return UserManagementApi;
}());
exports.UserManagementApi = UserManagementApi;
