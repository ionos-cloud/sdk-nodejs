/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { Lan } from '../model';
// @ts-ignore
import { LanNics } from '../model';
// @ts-ignore
import { LanPost } from '../model';
// @ts-ignore
import { LanProperties } from '../model';
// @ts-ignore
import { Lans } from '../model';
// @ts-ignore
import { Nic } from '../model';
/**
 * LANsApi - axios parameter creator
 * @export
 */
export const LANsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete the specified LAN within the data center.
         * @summary Delete LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansDelete: async (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansDelete.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the specified LAN within the data center.
         * @summary Retrieve LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansFindById: async (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansFindById.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansFindById.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all LANs within the data center.
         * @summary List LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansGet: async (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the properties of the NIC, attached to the specified LAN.
         * @summary Retrieve attached NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsFindById: async (datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansNicsFindById.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansNicsFindById.');
            }
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersLansNicsFindById.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}/nics/{nicId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all NICs, attached to the specified LAN.
         * @summary List LAN members
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsGet: async (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number,  orderBy?: string, maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansNicsGet.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansNicsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}/nics`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

        if (orderBy !== undefined) {
            localVarQueryParameter['orderBy'] = orderBy;
        }
        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }
            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach an existing NIC to the specified LAN.
         * @summary Attach NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsPost: async (datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansNicsPost.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansNicsPost.');
            }
            if (nic === null || nic === undefined) {
                throw new RequiredError('nic','Required parameter nic was null or undefined when calling datacentersLansNicsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}/nics`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof nic !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(nic !== undefined ? nic : {})
                : (nic || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of the specified LAN within the data center.
         * @summary Partially modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {LanProperties} lan The properties of the LAN to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPatch: async (datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansPatch.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansPatch.');
            }
            if (lan === null || lan === undefined) {
                throw new RequiredError('lan','Required parameter lan was null or undefined when calling datacentersLansPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof lan !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(lan !== undefined ? lan : {})
                : (lan || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a LAN within the data center.
         * @summary Create LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {LanPost} lan The LAN to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPost: async (datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansPost.');
            }
            if (lan === null || lan === undefined) {
                throw new RequiredError('lan','Required parameter lan was null or undefined when calling datacentersLansPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof lan !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(lan !== undefined ? lan : {})
                : (lan || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the properties of the specified LAN within the data center.
         * @summary Modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Lan} lan The modified LAN
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPut: async (datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number,  options: any = {}): Promise<RequestArgs> => {
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersLansPut.');
            }
            if (lanId === null || lanId === undefined) {
                throw new RequiredError('lanId','Required parameter lanId was null or undefined when calling datacentersLansPut.');
            }
            if (lan === null || lan === undefined) {
                throw new RequiredError('lan','Required parameter lan was null or undefined when calling datacentersLansPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/lans/{lanId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"lanId"}}`, encodeURIComponent(String(lanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof lan !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(lan !== undefined ? lan : {})
                : (lan || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LANsApi - functional programming interface
 * @export
 */
export const LANsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete the specified LAN within the data center.
         * @summary Delete LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansDelete(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansDelete(datacenterId, lanId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the specified LAN within the data center.
         * @summary Retrieve LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansFindById(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansFindById(datacenterId, lanId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all LANs within the data center.
         * @summary List LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lans>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansGet(datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve the properties of the NIC, attached to the specified LAN.
         * @summary Retrieve attached NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansNicsFindById(datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansNicsFindById(datacenterId, lanId, nicId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * List all NICs, attached to the specified LAN.
         * @summary List LAN members
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansNicsGet(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanNics>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansNicsGet(datacenterId, lanId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Attach an existing NIC to the specified LAN.
         * @summary Attach NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansNicsPost(datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansNicsPost(datacenterId, lanId, nic, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Update the properties of the specified LAN within the data center.
         * @summary Partially modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {LanProperties} lan The properties of the LAN to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansPatch(datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansPatch(datacenterId, lanId, lan, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Creates a LAN within the data center.
         * @summary Create LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {LanPost} lan The LAN to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansPost(datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanPost>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansPost(datacenterId, lan, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Modify the properties of the specified LAN within the data center.
         * @summary Modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Lan} lan The modified LAN
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersLansPut(datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>> {
            const axiosArgs = await LANsApiAxiosParamCreator(configuration).datacentersLansPut(datacenterId, lanId, lan, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * LANsApi - factory interface
 * @export
 */
export const LANsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete the specified LAN within the data center.
         * @summary Delete LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansDelete(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void> {
            return LANsApiFp(configuration).datacentersLansDelete(datacenterId, lanId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the specified LAN within the data center.
         * @summary Retrieve LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansFindById(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan> {
            return LANsApiFp(configuration).datacentersLansFindById(datacenterId, lanId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all LANs within the data center.
         * @summary List LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Lans> {
            return LANsApiFp(configuration).datacentersLansGet(datacenterId, pretty, depth, xContractNumber, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the properties of the NIC, attached to the specified LAN.
         * @summary Retrieve attached NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsFindById(datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic> {
            return LANsApiFp(configuration).datacentersLansNicsFindById(datacenterId, lanId, nicId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * List all NICs, attached to the specified LAN.
         * @summary List LAN members
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsGet(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<LanNics> {
            return LANsApiFp(configuration).datacentersLansNicsGet(datacenterId, lanId, pretty, depth, xContractNumber, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach an existing NIC to the specified LAN.
         * @summary Attach NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansNicsPost(datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic> {
            return LANsApiFp(configuration).datacentersLansNicsPost(datacenterId, lanId, nic, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of the specified LAN within the data center.
         * @summary Partially modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {LanProperties} lan The properties of the LAN to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPatch(datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan> {
            return LANsApiFp(configuration).datacentersLansPatch(datacenterId, lanId, lan, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a LAN within the data center.
         * @summary Create LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {LanPost} lan The LAN to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPost(datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LanPost> {
            return LANsApiFp(configuration).datacentersLansPost(datacenterId, lan, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the properties of the specified LAN within the data center.
         * @summary Modify LANs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} lanId The unique ID of the LAN.
         * @param {Lan} lan The modified LAN
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLansPut(datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan> {
            return LANsApiFp(configuration).datacentersLansPut(datacenterId, lanId, lan, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersLansDelete operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansDeleteRequest
 */
export interface LANsApiDatacentersLansDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly lanId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansFindById operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansFindByIdRequest
 */
export interface LANsApiDatacentersLansFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly lanId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansGet operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansGetRequest
 */
export interface LANsApiDatacentersLansGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly datacenterId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly xContractNumber?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LANsApiDatacentersLansGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersLansNicsFindById operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsFindByIdRequest
 */
export interface LANsApiDatacentersLansNicsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly lanId: string

    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly nicId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansNicsGet operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsGetRequest
 */
export interface LANsApiDatacentersLansNicsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly lanId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly xContractNumber?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly limit?: number
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly orderBy?: string
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    filters?: Map<string, string>
}

/**
 * Request parameters for datacentersLansNicsPost operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsPostRequest
 */
export interface LANsApiDatacentersLansNicsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly lanId: string

    /**
     * The NIC to be attached.
     * @type {Nic}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly nic: Nic

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansPatch operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPatchRequest
 */
export interface LANsApiDatacentersLansPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly lanId: string

    /**
     * The properties of the LAN to be updated.
     * @type {LanProperties}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly lan: LanProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansPost operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPostRequest
 */
export interface LANsApiDatacentersLansPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly datacenterId: string

    /**
     * The LAN to create.
     * @type {LanPost}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly lan: LanPost

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for datacentersLansPut operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPutRequest
 */
export interface LANsApiDatacentersLansPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly lanId: string

    /**
     * The modified LAN
     * @type {Lan}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly lan: Lan

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly xContractNumber?: number
}

/**
 * LANsApi - object-oriented interface
 * @export
 * @class LANsApi
 * @extends {BaseAPI}
 */
export class LANsApi extends BaseAPI {
    /**
     * Delete the specified LAN within the data center.
     * @summary Delete LANs
     * @param {LANsApiDatacentersLansDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansDelete(requestParameters: LANsApiDatacentersLansDeleteRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansDelete(requestParameters.datacenterId, requestParameters.lanId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the specified LAN within the data center.
     * @summary Retrieve LANs
     * @param {LANsApiDatacentersLansFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansFindById(requestParameters: LANsApiDatacentersLansFindByIdRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansFindById(requestParameters.datacenterId, requestParameters.lanId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all LANs within the data center.
     * @summary List LANs
     * @param {LANsApiDatacentersLansGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansGet(requestParameters: LANsApiDatacentersLansGetRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the properties of the NIC, attached to the specified LAN.
     * @summary Retrieve attached NICs
     * @param {LANsApiDatacentersLansNicsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansNicsFindById(requestParameters: LANsApiDatacentersLansNicsFindByIdRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansNicsFindById(requestParameters.datacenterId, requestParameters.lanId, requestParameters.nicId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all NICs, attached to the specified LAN.
     * @summary List LAN members
     * @param {LANsApiDatacentersLansNicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansNicsGet(requestParameters: LANsApiDatacentersLansNicsGetRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansNicsGet(requestParameters.datacenterId, requestParameters.lanId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach an existing NIC to the specified LAN.
     * @summary Attach NICs
     * @param {LANsApiDatacentersLansNicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansNicsPost(requestParameters: LANsApiDatacentersLansNicsPostRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansNicsPost(requestParameters.datacenterId, requestParameters.lanId, requestParameters.nic, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the properties of the specified LAN within the data center.
     * @summary Partially modify LANs
     * @param {LANsApiDatacentersLansPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansPatch(requestParameters: LANsApiDatacentersLansPatchRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansPatch(requestParameters.datacenterId, requestParameters.lanId, requestParameters.lan, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a LAN within the data center.
     * @summary Create LANs
     * @param {LANsApiDatacentersLansPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansPost(requestParameters: LANsApiDatacentersLansPostRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansPost(requestParameters.datacenterId, requestParameters.lan, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the properties of the specified LAN within the data center.
     * @summary Modify LANs
     * @param {LANsApiDatacentersLansPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    public datacentersLansPut(requestParameters: LANsApiDatacentersLansPutRequest, options?: any) {
        return LANsApiFp(this.configuration).datacentersLansPut(requestParameters.datacenterId, requestParameters.lanId, requestParameters.lan, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
