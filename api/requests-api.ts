/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0-SDK.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { Request } from '../model';
// @ts-ignore
import { RequestStatus } from '../model';
// @ts-ignore
import { Requests } from '../model';
/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsFindById: async (requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestsFindById.');
            }
            const localVarPath = `/requests/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet: async (pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((filterStatus === undefined) && (configuration !== undefined)) {
                filterStatus = configuration.getDefaultParamValue('filterStatus');
            }
            if (filterStatus !== undefined) {
                localVarQueryParameter['filter.status'] = filterStatus;
            }

            if ((filterCreatedAfter === undefined) && (configuration !== undefined)) {
                filterCreatedAfter = configuration.getDefaultParamValue('filterCreatedAfter');
            }
            if (filterCreatedAfter !== undefined) {
                localVarQueryParameter['filter.createdAfter'] = filterCreatedAfter;
            }

            if ((filterCreatedBefore === undefined) && (configuration !== undefined)) {
                filterCreatedBefore = configuration.getDefaultParamValue('filterCreatedBefore');
            }
            if (filterCreatedBefore !== undefined) {
                localVarQueryParameter['filter.createdBefore'] = filterCreatedBefore;
            }

            if ((filterCreatedDate === undefined) && (configuration !== undefined)) {
                filterCreatedDate = configuration.getDefaultParamValue('filterCreatedDate');
            }
            if (filterCreatedDate !== undefined) {
                localVarQueryParameter['filter.createdDate'] = filterCreatedDate;
            }

            if ((filterCreatedBy === undefined) && (configuration !== undefined)) {
                filterCreatedBy = configuration.getDefaultParamValue('filterCreatedBy');
            }
            if (filterCreatedBy !== undefined) {
                localVarQueryParameter['filter.createdBy'] = filterCreatedBy;
            }

            if ((filterEtag === undefined) && (configuration !== undefined)) {
                filterEtag = configuration.getDefaultParamValue('filterEtag');
            }
            if (filterEtag !== undefined) {
                localVarQueryParameter['filter.etag'] = filterEtag;
            }

            if ((filterRequestStatus === undefined) && (configuration !== undefined)) {
                filterRequestStatus = configuration.getDefaultParamValue('filterRequestStatus');
            }
            if (filterRequestStatus !== undefined) {
                localVarQueryParameter['filter.requestStatus'] = filterRequestStatus;
            }

            if ((filterMethod === undefined) && (configuration !== undefined)) {
                filterMethod = configuration.getDefaultParamValue('filterMethod');
            }
            if (filterMethod !== undefined) {
                localVarQueryParameter['filter.method'] = filterMethod;
            }

            if ((filterHeaders === undefined) && (configuration !== undefined)) {
                filterHeaders = configuration.getDefaultParamValue('filterHeaders');
            }
            if (filterHeaders !== undefined) {
                localVarQueryParameter['filter.headers'] = filterHeaders;
            }

            if ((filterBody === undefined) && (configuration !== undefined)) {
                filterBody = configuration.getDefaultParamValue('filterBody');
            }
            if (filterBody !== undefined) {
                localVarQueryParameter['filter.body'] = filterBody;
            }

            if ((filterUrl === undefined) && (configuration !== undefined)) {
                filterUrl = configuration.getDefaultParamValue('filterUrl');
            }
            if (filterUrl !== undefined) {
                localVarQueryParameter['filter.url'] = filterUrl;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsStatusGet: async (requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestsStatusGet.');
            }
            const localVarPath = `/requests/{requestId}/status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
            }
            if (xContractNumber !== undefined && xContractNumber !== null) {
                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsFindById(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const axiosArgs = await RequestsApiAxiosParamCreator(configuration).requestsFindById(requestId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsGet(pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Requests>> {
            const axiosArgs = await RequestsApiAxiosParamCreator(configuration).requestsGet(pretty, depth, xContractNumber, filterStatus, filterCreatedAfter, filterCreatedBefore, filterCreatedDate, filterCreatedBy, filterEtag, filterRequestStatus, filterMethod, filterHeaders, filterBody, filterUrl, offset, limit, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsStatusGet(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestStatus>> {
            const axiosArgs = await RequestsApiAxiosParamCreator(configuration).requestsStatusGet(requestId, pretty, depth, xContractNumber, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the attributes of a given request.
         * @summary Retrieve a Request
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsFindById(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Request> {
            return RequestsApiFp(configuration).requestsFindById(requestId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of API requests.
         * @summary List Requests
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {string} [filterStatus] Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
         * @param {string} [filterCreatedAfter] Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedBefore] Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
         * @param {string} [filterCreatedDate] Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
         * @param {string} [filterCreatedBy] Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterEtag] Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterRequestStatus] Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterMethod] Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterHeaders] Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterBody] Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {string} [filterUrl] Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet(pretty?: boolean, depth?: number, xContractNumber?: number, filterStatus?: string, filterCreatedAfter?: string, filterCreatedBefore?: string, filterCreatedDate?: string, filterCreatedBy?: string, filterEtag?: string, filterRequestStatus?: string, filterMethod?: string, filterHeaders?: string, filterBody?: string, filterUrl?: string, offset?: number, limit?: number, options?: any): AxiosPromise<Requests> {
            return RequestsApiFp(configuration).requestsGet(pretty, depth, xContractNumber, filterStatus, filterCreatedAfter, filterCreatedBefore, filterCreatedDate, filterCreatedBy, filterEtag, filterRequestStatus, filterMethod, filterHeaders, filterBody, filterUrl, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the status of a given request.
         * @summary Retrieve Request Status
         * @param {string} requestId 
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsStatusGet(requestId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<RequestStatus> {
            return RequestsApiFp(configuration).requestsStatusGet(requestId, pretty, depth, xContractNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestsFindById operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsFindByIdRequest
 */
export interface RequestsApiRequestsFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestsApiRequestsFindById
     */
    readonly requestId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof RequestsApiRequestsFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestsApiRequestsFindById
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
     * @type {number}
     * @memberof RequestsApiRequestsFindById
     */
    readonly xContractNumber?: number
}

/**
 * Request parameters for requestsGet operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsGetRequest
 */
export interface RequestsApiRequestsGetRequest {
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof RequestsApiRequestsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestsApiRequestsGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
     * @type {number}
     * @memberof RequestsApiRequestsGet
     */
    readonly xContractNumber?: number

    /**
     * Request filter to fetch all requests based on a particular status [QUEUED, RUNNING, DONE, FAILED]. It doesn\&#39;t depend on depth query parameter
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterStatus?: string

    /**
     * Request filter to fetch all requests created after the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterCreatedAfter?: string

    /**
     * Request filter to fetch all requests created before the specified date. It doesn\&#39;t depend on depth query parameter. Date format e.g. 2021-01-01+00:00:00
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterCreatedBefore?: string

    /**
     * Response filter to select and display only the requests that contains the specified createdDate. The value is case insensitive and it  depends on depth query parameter that should have a value greater than 0. Date format e.g. 2020-11-16T17:42:59Z
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterCreatedDate?: string

    /**
     * Response filter to select and display only the requests that contains the specified createdBy. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterCreatedBy?: string

    /**
     * Response filter to select and display only the requests that contains the specified etag. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterEtag?: string

    /**
     * Response filter to select and display only the requests that contains the specified requestStatus. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterRequestStatus?: string

    /**
     * Response filter to select and display only the requests that contains the specified method. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterMethod?: string

    /**
     * Response filter to select and display only the requests that contains the specified headers. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterHeaders?: string

    /**
     * Response filter to select and display only the requests that contains the specified body. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterBody?: string

    /**
     * Response filter to select and display only the requests that contains the specified url. The value is case insensitive and it depends on depth query parameter that should have a value greater than 0. 
     * @type {string}
     * @memberof RequestsApiRequestsGet
     */
    readonly filterUrl?: string

    /**
     * The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
     * @type {number}
     * @memberof RequestsApiRequestsGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof RequestsApiRequestsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for requestsStatusGet operation in RequestsApi.
 * @export
 * @interface RequestsApiRequestsStatusGetRequest
 */
export interface RequestsApiRequestsStatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestsApiRequestsStatusGet
     */
    readonly requestId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof RequestsApiRequestsStatusGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof RequestsApiRequestsStatusGet
     */
    readonly depth?: number

    /**
     * Users with multiple contracts must provide the contract number, against which all API requests are to be executed.
     * @type {number}
     * @memberof RequestsApiRequestsStatusGet
     */
    readonly xContractNumber?: number
}

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
    /**
     * Retrieves the attributes of a given request.
     * @summary Retrieve a Request
     * @param {RequestsApiRequestsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsFindById(requestParameters: RequestsApiRequestsFindByIdRequest, options?: any) {
        return RequestsApiFp(this.configuration).requestsFindById(requestParameters.requestId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of API requests.
     * @summary List Requests
     * @param {RequestsApiRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsGet(requestParameters: RequestsApiRequestsGetRequest = {}, options?: any) {
        return RequestsApiFp(this.configuration).requestsGet(requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.filterStatus, requestParameters.filterCreatedAfter, requestParameters.filterCreatedBefore, requestParameters.filterCreatedDate, requestParameters.filterCreatedBy, requestParameters.filterEtag, requestParameters.filterRequestStatus, requestParameters.filterMethod, requestParameters.filterHeaders, requestParameters.filterBody, requestParameters.filterUrl, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the status of a given request.
     * @summary Retrieve Request Status
     * @param {RequestsApiRequestsStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsStatusGet(requestParameters: RequestsApiRequestsStatusGetRequest, options?: any) {
        return RequestsApiFp(this.configuration).requestsStatusGet(requestParameters.requestId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
