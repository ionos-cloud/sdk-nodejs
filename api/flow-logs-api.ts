/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0-SDK.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { FlowLog } from '../model';
// @ts-ignore
import { FlowLogProperties } from '../model';
// @ts-ignore
import { FlowLogPut } from '../model';
// @ts-ignore
import { FlowLogs } from '../model';
/**
 * FlowLogsApi - axios parameter creator
 * @export
 */
export const FlowLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the specified Flow Log.
         * @summary Delete a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsDelete: async (datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsDelete.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsDelete.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsDelete.');
            }
            // verify required parameter 'flowlogId' is not null or undefined
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId','Required parameter flowlogId was null or undefined when calling datacentersServersNicsFlowlogsDelete.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)))
                .replace(`{${"flowlogId"}}`, encodeURIComponent(String(flowlogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attributes of a given Flow Log.
         * @summary Retrieve a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsFindById: async (datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsFindById.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsFindById.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsFindById.');
            }
            // verify required parameter 'flowlogId' is not null or undefined
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId','Required parameter flowlogId was null or undefined when calling datacentersServersNicsFlowlogsFindById.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)))
                .replace(`{${"flowlogId"}}`, encodeURIComponent(String(flowlogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of Flow Logs associated with a particular network interface.
         * @summary List Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsGet: async (datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsGet.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsGet.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsGet.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will partially update a Flow Log record.
         * @summary Partially update a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogProperties} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPatch: async (datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsPatch.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsPatch.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsPatch.');
            }
            // verify required parameter 'flowlogId' is not null or undefined
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId','Required parameter flowlogId was null or undefined when calling datacentersServersNicsFlowlogsPatch.');
            }
            // verify required parameter 'flowlog' is not null or undefined
            if (flowlog === null || flowlog === undefined) {
                throw new RequiredError('flowlog','Required parameter flowlog was null or undefined when calling datacentersServersNicsFlowlogsPatch.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)))
                .replace(`{${"flowlogId"}}`, encodeURIComponent(String(flowlogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof flowlog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(flowlog !== undefined ? flowlog : {})
                : (flowlog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will add a Flow Log to the network interface.
         * @summary Create a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {FlowLog} flowlog Flow Log to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPost: async (datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsPost.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsPost.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsPost.');
            }
            // verify required parameter 'flowlog' is not null or undefined
            if (flowlog === null || flowlog === undefined) {
                throw new RequiredError('flowlog','Required parameter flowlog was null or undefined when calling datacentersServersNicsFlowlogsPost.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof flowlog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(flowlog !== undefined ? flowlog : {})
                : (flowlog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will update a Flow Log record.
         * @summary Modify a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogPut} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPut: async (datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacenterId' is not null or undefined
            if (datacenterId === null || datacenterId === undefined) {
                throw new RequiredError('datacenterId','Required parameter datacenterId was null or undefined when calling datacentersServersNicsFlowlogsPut.');
            }
            // verify required parameter 'serverId' is not null or undefined
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId','Required parameter serverId was null or undefined when calling datacentersServersNicsFlowlogsPut.');
            }
            // verify required parameter 'nicId' is not null or undefined
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId','Required parameter nicId was null or undefined when calling datacentersServersNicsFlowlogsPut.');
            }
            // verify required parameter 'flowlogId' is not null or undefined
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId','Required parameter flowlogId was null or undefined when calling datacentersServersNicsFlowlogsPut.');
            }
            // verify required parameter 'flowlog' is not null or undefined
            if (flowlog === null || flowlog === undefined) {
                throw new RequiredError('flowlog','Required parameter flowlog was null or undefined when calling datacentersServersNicsFlowlogsPut.');
            }
            const localVarPath = `/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}`
                .replace(`{${"datacenterId"}}`, encodeURIComponent(String(datacenterId)))
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"nicId"}}`, encodeURIComponent(String(nicId)))
                .replace(`{${"flowlogId"}}`, encodeURIComponent(String(flowlogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic Authentication required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication Token Authentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ((pretty === undefined) && (configuration !== undefined)) {
                pretty = configuration.getDefaultParamValue('pretty');
            }
            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if ((depth === undefined) && (configuration !== undefined)) {
                depth = configuration.getDefaultParamValue('depth');
            }
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof flowlog !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(flowlog !== undefined ? flowlog : {})
                : (flowlog || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowLogsApi - functional programming interface
 * @export
 */
export const FlowLogsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the specified Flow Log.
         * @summary Delete a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsDelete(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsDelete(datacenterId, serverId, nicId, flowlogId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves the attributes of a given Flow Log.
         * @summary Retrieve a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsFindById(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsFindById(datacenterId, serverId, nicId, flowlogId, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves a list of Flow Logs associated with a particular network interface.
         * @summary List Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsGet(datacenterId, serverId, nicId, pretty, depth, offset, limit, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * This will partially update a Flow Log record.
         * @summary Partially update a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogProperties} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsPatch(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsPatch(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * This will add a Flow Log to the network interface.
         * @summary Create a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {FlowLog} flowlog Flow Log to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsPost(datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsPost(datacenterId, serverId, nicId, flowlog, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * This will update a Flow Log record.
         * @summary Modify a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogPut} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datacentersServersNicsFlowlogsPut(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>> {
            const axiosArgs = await FlowLogsApiAxiosParamCreator(configuration).datacentersServersNicsFlowlogsPut(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * FlowLogsApi - factory interface
 * @export
 */
export const FlowLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the specified Flow Log.
         * @summary Delete a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsDelete(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<void> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsDelete(datacenterId, serverId, nicId, flowlogId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attributes of a given Flow Log.
         * @summary Retrieve a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsFindById(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsFindById(datacenterId, serverId, nicId, flowlogId, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of Flow Logs associated with a particular network interface.
         * @summary List Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the Server
         * @param {string} nicId The unique ID of the NIC
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FlowLogs> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsGet(datacenterId, serverId, nicId, pretty, depth, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * This will partially update a Flow Log record.
         * @summary Partially update a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogProperties} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPatch(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsPatch(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * This will add a Flow Log to the network interface.
         * @summary Create a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {FlowLog} flowlog Flow Log to be created
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPost(datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsPost(datacenterId, serverId, nicId, flowlog, pretty, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * This will update a Flow Log record.
         * @summary Modify a Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} serverId The unique ID of the server
         * @param {string} nicId The unique ID of the NIC
         * @param {string} flowlogId The unique ID of the Flow Log
         * @param {FlowLogPut} flowlog Modified Flow Log
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersServersNicsFlowlogsPut(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog> {
            return FlowLogsApiFp(configuration).datacentersServersNicsFlowlogsPut(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for datacentersServersNicsFlowlogsDelete operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly nicId: string

    /**
     * The unique ID of the Flow Log
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly flowlogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersNicsFlowlogsFindById operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly nicId: string

    /**
     * The unique ID of the Flow Log
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly flowlogId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersNicsFlowlogsGet operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsGetRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly datacenterId: string

    /**
     * The unique ID of the Server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly nicId: string

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly depth?: number

    /**
     * The first element (from the complete list of the elements) to include in the response (use together with limit for pagination).
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for datacentersServersNicsFlowlogsPatch operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly datacenterId: string

    /**
     * The unique ID of the server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly nicId: string

    /**
     * The unique ID of the Flow Log
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly flowlogId: string

    /**
     * Modified Flow Log
     * @type {FlowLogProperties}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly flowlog: FlowLogProperties

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersNicsFlowlogsPost operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPostRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly datacenterId: string

    /**
     * The unique ID of the server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly nicId: string

    /**
     * Flow Log to be created
     * @type {FlowLog}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly flowlog: FlowLog

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly depth?: number
}

/**
 * Request parameters for datacentersServersNicsFlowlogsPut operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPutRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly datacenterId: string

    /**
     * The unique ID of the server
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly serverId: string

    /**
     * The unique ID of the NIC
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly nicId: string

    /**
     * The unique ID of the Flow Log
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly flowlogId: string

    /**
     * Modified Flow Log
     * @type {FlowLogPut}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly flowlog: FlowLogPut

    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly pretty?: boolean

    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly depth?: number
}

/**
 * FlowLogsApi - object-oriented interface
 * @export
 * @class FlowLogsApi
 * @extends {BaseAPI}
 */
export class FlowLogsApi extends BaseAPI {
    /**
     * Removes the specified Flow Log.
     * @summary Delete a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsDelete(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsDelete(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.flowlogId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attributes of a given Flow Log.
     * @summary Retrieve a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsFindById(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsFindById(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.flowlogId, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of Flow Logs associated with a particular network interface.
     * @summary List Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsGet(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsGetRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsGet(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.pretty, requestParameters.depth, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This will partially update a Flow Log record.
     * @summary Partially update a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsPatch(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsPatch(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.flowlogId, requestParameters.flowlog, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This will add a Flow Log to the network interface.
     * @summary Create a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsPost(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPostRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsPost(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.flowlog, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This will update a Flow Log record.
     * @summary Modify a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    public datacentersServersNicsFlowlogsPut(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPutRequest, options?: any) {
        return FlowLogsApiFp(this.configuration).datacentersServersNicsFlowlogsPut(requestParameters.datacenterId, requestParameters.serverId, requestParameters.nicId, requestParameters.flowlogId, requestParameters.flowlog, requestParameters.pretty, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }
}
