"use strict";
/**
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeApi = exports.VolumeApiApiKeys = void 0;
var request_1 = __importDefault(require("request"));
var models_1 = require("../model/models");
var models_2 = require("../model/models");
var apis_1 = require("./apis");
var defaultBasePath = 'https://api.ionos.com/cloudapi/v5';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var VolumeApiApiKeys;
(function (VolumeApiApiKeys) {
    VolumeApiApiKeys[VolumeApiApiKeys["Token Authentication"] = 0] = "Token Authentication";
})(VolumeApiApiKeys = exports.VolumeApiApiKeys || (exports.VolumeApiApiKeys = {}));
var VolumeApi = /** @class */ (function () {
    function VolumeApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'Basic Authentication': new models_2.HttpBasicAuth(),
            'Token Authentication': new models_2.ApiKeyAuth('header', 'Authorization'),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VolumeApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VolumeApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VolumeApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: false,
        configurable: true
    });
    VolumeApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    VolumeApi.prototype.setApiKey = function (key, value) {
        this.authentications[VolumeApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(VolumeApi.prototype, "username", {
        set: function (username) {
            this.authentications['Basic Authentication'].username = username;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VolumeApi.prototype, "password", {
        set: function (password) {
            this.authentications['Basic Authentication'].password = password;
        },
        enumerable: false,
        configurable: true
    });
    VolumeApi.prototype.addInterceptor = function (interceptor) {
        this.interceptors.push(interceptor);
    };
    /**
     * Creates a snapshot of a volume within the datacenter. You can use a snapshot to create a new storage volume or to restore a storage volume.
     * @summary Create Volume Snapshot
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param name The name of the snapshot
     * @param description The description of the snapshot
     * @param secAuthProtection Flag representing if extra protection is enabled on snapshot e.g. Two Factor protection etc.
     * @param licenceType The OS type of this Snapshot
     */
    VolumeApi.prototype.datacentersVolumesCreateSnapshotPost = function (datacenterId, volumeId, pretty, depth, xContractNumber, name, description, secAuthProtection, licenceType, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_1, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}/create-snapshot'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesCreateSnapshotPost.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesCreateSnapshotPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                if (name !== undefined) {
                    localVarFormParams['name'] = models_1.ObjectSerializer.serialize(name, "string");
                }
                if (description !== undefined) {
                    localVarFormParams['description'] = models_1.ObjectSerializer.serialize(description, "string");
                }
                if (secAuthProtection !== undefined) {
                    localVarFormParams['secAuthProtection'] = models_1.ObjectSerializer.serialize(secAuthProtection, "boolean");
                }
                if (licenceType !== undefined) {
                    localVarFormParams['licenceType'] = models_1.ObjectSerializer.serialize(licenceType, "string");
                }
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_1 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_1(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Snapshot");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Deletes the specified volume. This will result in the volume being removed from your datacenter. Use this with caution.
     * @summary Delete a Volume
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    VolumeApi.prototype.datacentersVolumesDelete = function (datacenterId, volumeId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_2, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesDelete.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesDelete.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'DELETE',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_2 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_2(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Retrieves the attributes of a given Volume
     * @summary Retrieve a Volume
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    VolumeApi.prototype.datacentersVolumesFindById = function (datacenterId, volumeId, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_3, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesFindById.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesFindById.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_3 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_3(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Retrieves a list of Volumes.
     * @summary List Volumes
     * @param datacenterId The unique ID of the datacenter
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination)
     */
    VolumeApi.prototype.datacentersVolumesGet = function (datacenterId, pretty, depth, xContractNumber, offset, limit, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_4, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesGet.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                if (offset !== undefined) {
                    localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
                }
                if (limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'GET',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_4 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_4(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volumes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use update attributes of a Volume
     * @summary Partially modify a Volume
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param volume Modified properties of Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    VolumeApi.prototype.datacentersVolumesPatch = function (datacenterId, volumeId, volume, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_5, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesPatch.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesPatch.');
                }
                // verify required parameter 'volume' is not null or undefined
                if (volume === null || volume === undefined) {
                    throw new Error('Required parameter volume was null or undefined when calling datacentersVolumesPatch.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PATCH',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(volume, "VolumeProperties")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_5 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_5(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * Creates a volume within the datacenter. This will not attach the volume to a server. Please see the Servers section for details on how to attach storage volumes
     * @summary Create a Volume
     * @param datacenterId The unique ID of the datacenter
     * @param volume Volume to be created
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    VolumeApi.prototype.datacentersVolumesPost = function (datacenterId, volume, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_6, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesPost.');
                }
                // verify required parameter 'volume' is not null or undefined
                if (volume === null || volume === undefined) {
                    throw new Error('Required parameter volume was null or undefined when calling datacentersVolumesPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(volume, "Volume")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_6 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_6(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * You can use update attributes of a Volume
     * @summary Modify a Volume
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param volume Modified Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     */
    VolumeApi.prototype.datacentersVolumesPut = function (datacenterId, volumeId, volume, pretty, depth, xContractNumber, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_7, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesPut.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesPut.');
                }
                // verify required parameter 'volume' is not null or undefined
                if (volume === null || volume === undefined) {
                    throw new Error('Required parameter volume was null or undefined when calling datacentersVolumesPut.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                localVarRequestOptions = {
                    method: 'PUT',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                    body: models_1.ObjectSerializer.serialize(volume, "Volume")
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_7 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_7(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Volume");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    /**
     * This will restore a snapshot onto a volume. A snapshot is created as just another image that can be used to create subsequent volumes if you want or to restore an existing volume.
     * @summary Restore Volume Snapshot
     * @param datacenterId The unique ID of the datacenter
     * @param volumeId The unique ID of the Volume
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children\&#39;s children are included  - depth&#x3D;... and so on
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed
     * @param snapshotId This is the ID of the snapshot
     */
    VolumeApi.prototype.datacentersVolumesRestoreSnapshotPost = function (datacenterId, volumeId, pretty, depth, xContractNumber, snapshotId, options) {
        if (options === void 0) { options = { headers: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var localVarPath, localVarQueryParameters, localVarHeaderParams, produces, localVarFormParams, localVarUseFormData, localVarRequestOptions, authenticationPromise, interceptorPromise, _loop_8, _i, _a, interceptor, apiCallFunction;
            var _this = this;
            return __generator(this, function (_b) {
                localVarPath = this.basePath + '/datacenters/{datacenterId}/volumes/{volumeId}/restore-snapshot'
                    .replace('{' + 'datacenterId' + '}', encodeURIComponent(String(datacenterId)))
                    .replace('{' + 'volumeId' + '}', encodeURIComponent(String(volumeId)));
                localVarQueryParameters = {};
                localVarHeaderParams = Object.assign({}, this._defaultHeaders);
                produces = ['application/json'];
                // give precedence to 'application/json'
                if (produces.indexOf('application/json') >= 0) {
                    localVarHeaderParams.Accept = 'application/json';
                }
                else {
                    localVarHeaderParams.Accept = produces.join(',');
                }
                localVarFormParams = {};
                // verify required parameter 'datacenterId' is not null or undefined
                if (datacenterId === null || datacenterId === undefined) {
                    throw new Error('Required parameter datacenterId was null or undefined when calling datacentersVolumesRestoreSnapshotPost.');
                }
                // verify required parameter 'volumeId' is not null or undefined
                if (volumeId === null || volumeId === undefined) {
                    throw new Error('Required parameter volumeId was null or undefined when calling datacentersVolumesRestoreSnapshotPost.');
                }
                if (pretty !== undefined) {
                    localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, "boolean");
                }
                if (depth !== undefined) {
                    localVarQueryParameters['depth'] = models_1.ObjectSerializer.serialize(depth, "number");
                }
                localVarHeaderParams['X-Contract-Number'] = models_1.ObjectSerializer.serialize(xContractNumber, "number");
                Object.assign(localVarHeaderParams, options.headers);
                localVarUseFormData = false;
                if (snapshotId !== undefined) {
                    localVarFormParams['snapshotId'] = models_1.ObjectSerializer.serialize(snapshotId, "string");
                }
                localVarRequestOptions = {
                    method: 'POST',
                    qs: localVarQueryParameters,
                    headers: localVarHeaderParams,
                    uri: localVarPath,
                    useQuerystring: this._useQuerystring,
                    json: true,
                };
                authenticationPromise = Promise.resolve();
                if (this.authentications['Basic Authentication'].username && this.authentications['Basic Authentication'].password) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Basic Authentication'].applyToRequest(localVarRequestOptions); });
                }
                if (this.authentications['Token Authentication'].apiKey) {
                    authenticationPromise = authenticationPromise.then(function () { return _this.authentications['Token Authentication'].applyToRequest(localVarRequestOptions); });
                }
                authenticationPromise = authenticationPromise.then(function () { return _this.authentications.default.applyToRequest(localVarRequestOptions); });
                interceptorPromise = authenticationPromise;
                _loop_8 = function (interceptor) {
                    interceptorPromise = interceptorPromise.then(function () { return interceptor(localVarRequestOptions); });
                };
                for (_i = 0, _a = this.interceptors; _i < _a.length; _i++) {
                    interceptor = _a[_i];
                    _loop_8(interceptor);
                }
                apiCallFunction = function (resolve, reject) {
                    request_1.default(localVarRequestOptions, function (error, response, body) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "object");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                var backoffTime = 0;
                                if (response.headers['retry-after'] != null) {
                                    backoffTime = response.headers['retry-after'];
                                }
                                switch (response.statusCode) {
                                    case VolumeApi.BAD_GATEWAY:
                                    case VolumeApi.SERVICE_UNAVAILABLE:
                                    case VolumeApi.GATEWAY_TIMEOUT:
                                        backoffTime = VolumeApi.waitTime;
                                        break;
                                    case VolumeApi.TOO_MANY_REQUESTS:
                                        if (response.headers['retry-after'] != null) {
                                            backoffTime = response.headers['retry-after'];
                                        }
                                        else {
                                            backoffTime = VolumeApi.waitTime;
                                        }
                                        break;
                                    default:
                                        reject(new apis_1.HttpError(response, body, response.statusCode));
                                }
                                setTimeout(function () { return apiCallFunction(resolve, reject); }, backoffTime * 1000);
                            }
                        }
                    });
                };
                return [2 /*return*/, interceptorPromise.then(function () {
                        if (Object.keys(localVarFormParams).length) {
                            if (localVarUseFormData) {
                                localVarRequestOptions.formData = localVarFormParams;
                            }
                            else {
                                localVarRequestOptions.form = localVarFormParams;
                            }
                        }
                        return new Promise(apiCallFunction);
                    })];
            });
        });
    };
    VolumeApi.prototype.sleep = function (seconds) {
        var e = new Date().getTime() + (seconds * 1000);
        while (new Date().getTime() <= e) { }
    };
    VolumeApi.prototype.waitForCompletion = function (requestId, timeout, initialWait, scaleup, maxRetries) {
        if (timeout === void 0) { timeout = 3600; }
        if (initialWait === void 0) { initialWait = 5; }
        if (scaleup === void 0) { scaleup = 10; }
        if (maxRetries === void 0) { maxRetries = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var waitPeriod, nextIncrease, requestCall, breakLoop, currentTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /**
                         Poll resource request status until resource is provisioned.
                
                         :param      requestId: Request id of the action.
                         :type       requestId: ``str``
                
                         :param      timeout: Maximum waiting time in seconds. None means infinite waiting time.
                         :type       timeout: ``int``
                
                         :param      initialWait: Initial polling interval in seconds.
                         :type       initialWait: ``int``
                
                         :param      scaleup: Double polling interval every scaleup steps, which will be doubled.
                         :type       scaleup: ``int``
                
                         */
                        if (!requestId) {
                            throw new Error("Request ID is missing.");
                        }
                        waitPeriod = initialWait;
                        nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                        timeout = Date.now() / 1000 + timeout;
                        requestCall = (new apis_1.RequestApi(this.username, this.password)).requestsStatusGet(requestId);
                        breakLoop = false;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [4 /*yield*/, requestCall.then(function (request) {
                                var _a, _b;
                                if (((_a = request.body.metadata) === null || _a === void 0 ? void 0 : _a.status) == models_1.RequestStatusMetadata.StatusEnum.Done) {
                                    breakLoop = true;
                                }
                                else if (((_b = request.body.metadata) === null || _b === void 0 ? void 0 : _b.status) == models_1.RequestStatusMetadata.StatusEnum.Failed) {
                                    throw new Error("Request " + requestId + " failed to complete: " + request['metadata']['message']);
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (breakLoop) {
                            return [3 /*break*/, 3];
                        }
                        currentTime = Date.now() / 1000;
                        if (timeout && currentTime > timeout) {
                            throw new Error("Timed out waiting for request " + requestId + ".");
                        }
                        if (currentTime > nextIncrease) {
                            waitPeriod *= 2;
                            nextIncrease = Date.now() / 1000 + waitPeriod * scaleup;
                            scaleup *= 2;
                        }
                        this.sleep(waitPeriod);
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    VolumeApi.BAD_GATEWAY = 502;
    VolumeApi.SERVICE_UNAVAILABLE = 503;
    VolumeApi.GATEWAY_TIMEOUT = 504;
    VolumeApi.TOO_MANY_REQUESTS = 429;
    VolumeApi.maxRetries = 3;
    VolumeApi.waitTime = 10;
    VolumeApi.maxWaitTime = 2000;
    return VolumeApi;
}());
exports.VolumeApi = VolumeApi;
