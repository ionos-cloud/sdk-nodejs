/**
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ResourceReference } from './resourceReference';

export class ServerProperties {
    /**
    * A name of that resource
    */
    'name'?: string;
    /**
    * The total number of cores for the server
    */
    'cores': number;
    /**
    * The amount of memory for the server in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
    */
    'ram': number;
    /**
    * The availability zone in which the server should exist
    */
    'availabilityZone'?: ServerProperties.AvailabilityZoneEnum;
    /**
    * Status of the virtual Machine
    */
    'vmState'?: ServerProperties.VmStateEnum;
    'bootCdrom'?: ResourceReference;
    'bootVolume'?: ResourceReference;
    /**
    * Cpu family of pserver
    */
    'cpuFamily'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "cores",
            "baseName": "cores",
            "type": "number"
        },
        {
            "name": "ram",
            "baseName": "ram",
            "type": "number"
        },
        {
            "name": "availabilityZone",
            "baseName": "availabilityZone",
            "type": "ServerProperties.AvailabilityZoneEnum"
        },
        {
            "name": "vmState",
            "baseName": "vmState",
            "type": "ServerProperties.VmStateEnum"
        },
        {
            "name": "bootCdrom",
            "baseName": "bootCdrom",
            "type": "ResourceReference"
        },
        {
            "name": "bootVolume",
            "baseName": "bootVolume",
            "type": "ResourceReference"
        },
        {
            "name": "cpuFamily",
            "baseName": "cpuFamily",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ServerProperties.attributeTypeMap;
    }
}

export namespace ServerProperties {
    export enum AvailabilityZoneEnum {
        Auto = <any> 'AUTO',
        Zone1 = <any> 'ZONE_1',
        Zone2 = <any> 'ZONE_2'
    }
    export enum VmStateEnum {
        Nostate = <any> 'NOSTATE',
        Running = <any> 'RUNNING',
        Blocked = <any> 'BLOCKED',
        Paused = <any> 'PAUSED',
        Shutdown = <any> 'SHUTDOWN',
        Shutoff = <any> 'SHUTOFF',
        Crashed = <any> 'CRASHED'
    }
}
